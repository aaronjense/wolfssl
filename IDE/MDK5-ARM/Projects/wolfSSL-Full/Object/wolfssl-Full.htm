<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Object\wolfssl-Full.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Object\wolfssl-Full.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Aug 31 11:45:20 2018
<BR><P>
<H3>Maximum Stack Usage =      13264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
client_test &rArr; wolfSSL_CTX_load_verify_locations &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[569]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[102]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[102]">os_error</a><BR>
 <LI><a href="#[7f]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">rt_alloc_box</a><BR>
 <LI><a href="#[1b0]">net_sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b0]">net_sys_error</a><BR>
 <LI><a href="#[b8]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8]">os_idle_demon</a><BR>
 <LI><a href="#[26]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">NMI_Handler</a><BR>
 <LI><a href="#[27]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">HardFault_Handler</a><BR>
 <LI><a href="#[28]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">MemManage_Handler</a><BR>
 <LI><a href="#[29]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BusFault_Handler</a><BR>
 <LI><a href="#[2a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UsageFault_Handler</a><BR>
 <LI><a href="#[2c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">DebugMon_Handler</a><BR>
 <LI><a href="#[41]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC_IRQHandler</a><BR>
 <LI><a href="#[417]">mp_sub_d</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a9]">mp_add_d</a><BR>
 <LI><a href="#[418]">mp_exptmod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[418]">mp_exptmod</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ADC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[e1]">AbortTransfer</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[29]">BusFault_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[43]">CAN1_RX0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[44]">CAN1_RX1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[45]">CAN1_SCE_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[42]">CAN1_TX_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6f]">CAN2_RX0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[70]">CAN2_RX1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[71]">CAN2_SCE_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6e]">CAN2_TX_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[dc]">CardPower</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[d4]">Control</a> from emac_stm32f2xx.o(.text) referenced 2 times from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[d3]">ControlTimer</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[7d]">DCMI_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream3_IRQHandler</a> from mci_stm32f2xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream6_IRQHandler</a> from mci_stm32f2xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[75]">DMA2_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6c]">ETH_IRQHandler</a> from emac_stm32f2xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6d]">ETH_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[35]">EXTI0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[57]">EXTI15_10_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[36]">EXTI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[37]">EXTI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[38]">EXTI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[39]">EXTI4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[46]">EXTI9_5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[90]">EmbedReceive</a> from wolfio.o(.text) referenced from internal.o(.text)
 <LI><a href="#[91]">EmbedSend</a> from wolfio.o(.text) referenced from internal.o(.text)
 <LI><a href="#[33]">FLASH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5f]">FSMC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c7]">GetCapabilities</a> from emac_stm32f2xx.o(.text) referenced 2 times from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[c5]">GetLinkInfo</a> from phy_st802rt1.o(.text) referenced from phy_st802rt1.o(.constdata)
 <LI><a href="#[c4]">GetLinkState</a> from phy_st802rt1.o(.text) referenced from phy_st802rt1.o(.constdata)
 <LI><a href="#[cb]">GetMacAddress</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[d0]">GetRxFrameSize</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[d1]">GetRxFrameTime</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[e3]">GetStatus</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[d2]">GetTxFrameTime</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[be]">GetVersion</a> from phy_st802rt1.o(.text) referenced 3 times from phy_st802rt1.o(.constdata)
 <LI><a href="#[7e]">HASH_RNG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[27]">HardFault_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4f]">I2C1_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4e]">I2C1_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[51]">I2C2_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[50]">I2C2_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[78]">I2C3_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[77]">I2C3_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[bf]">Initialize</a> from phy_st802rt1.o(.text) referenced 3 times from phy_st802rt1.o(.constdata)
 <LI><a href="#[86]">MC0_MCI_SignalEvent</a> from fs_config.o(.text) referenced from fs_config.o(.text)
 <LI><a href="#[28]">MemManage_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[26]">NMI_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[72]">OTG_FS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[59]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7c]">OTG_HS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[d5]">PHY_Read</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[d6]">PHY_Write</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[30]">PVD_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c1]">PowerControl</a> from phy_st802rt1.o(.text) referenced 3 times from phy_st802rt1.o(.constdata)
 <LI><a href="#[34]">RCC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[58]">RTC_Alarm_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[32]">RTC_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[83]">RX_DMA_Complete</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.text)
 <LI><a href="#[dd]">ReadCD</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[cf]">ReadFrame</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[de]">ReadWP</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[25]">Reset_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[60]">SDIO_IRQHandler</a> from mci_stm32f2xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[52]">SPI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[53]">SPI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[62]">SPI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[df]">SendCommand</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[ce]">SendFrame</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[cd]">SetAddressFilter</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[c2]">SetInterface</a> from phy_st802rt1.o(.text) referenced from phy_st802rt1.o(.constdata)
 <LI><a href="#[cc]">SetMacAddress</a> from emac_stm32f2xx.o(.text) referenced from emac_stm32f2xx.o(.constdata)
 <LI><a href="#[c3]">SetMode</a> from phy_st802rt1.o(.text) referenced from phy_st802rt1.o(.constdata)
 <LI><a href="#[e0]">SetupTransfer</a> from mci_stm32f2xx.o(.text) referenced from mci_stm32f2xx.o(.constdata)
 <LI><a href="#[2e]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[84]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[31]">TAMP_STAMP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[47]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4a]">TIM1_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[49]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[48]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4b]">TIM2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4c]">TIM3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4d]">TIM4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[61]">TIM5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[65]">TIM6_DAC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[66]">TIM7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5d]">TIM8_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[92]">TLS_hmac</a> from tls.o(.text) referenced 2 times from internal.o(.text)
 <LI><a href="#[63]">UART4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[64]">UART5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[54]">USART1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[55]">USART2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[56]">USART3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[76]">USART6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c0]">Uninitialize</a> from phy_st802rt1.o(.text) referenced 3 times from phy_st802rt1.o(.constdata)
 <LI><a href="#[2a]">UsageFault_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2f]">WWDG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[fd]">__main</a> from __main.o(!!!main) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[9d]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[96]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[9a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[99]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[9b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[98]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[97]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[1c]">arc4_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[c]">benchmark_test</a> from benchmark.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[bc]">bg_job_invoke</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[9f]">bsd_cb_tcp</a> from net_bsd.o(i.bsd_cb_tcp) referenced from net_bsd.o(i.listen)
 <LI><a href="#[9f]">bsd_cb_tcp</a> from net_bsd.o(i.bsd_cb_tcp) referenced from net_bsd.o(i.socket)
 <LI><a href="#[b9]">bsd_cb_udp</a> from net_bsd.o(i.bsd_cb_udp) referenced from net_bsd.o(i.socket)
 <LI><a href="#[1e]">camellia_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[e]">client_test</a> from client.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[bb]">command_invoke</a> from shell.o(.text) referenced from shell.o(.constdata)
 <LI><a href="#[13]">command_not_found</a> from shell.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[21]">dh_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[a0]">dhcp_listener</a> from net_dhcp_client.o(i.dhcp_listener) referenced from net_dhcp_client.o(i.net_dhcp_client_init)
 <LI><a href="#[9e]">dns_cbfunc</a> from net_bsd_host.o(i.dns_cbfunc) referenced from net_bsd_host.o(i.gethostbyname)
 <LI><a href="#[a1]">dns_listener</a> from net_dns_client.o(i.dns_listener) referenced from net_dns_client.o(i.net_dns_client_init)
 <LI><a href="#[22]">dsa_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[24]">ecc_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[a]">echoclient_test</a> from echoclient.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[b]">echoserver_test</a> from echoserver.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[a2]">eth_notify</a> from net_eth.o(i.eth_notify) referenced from net_eth.o(i.net_eth_iface_init)
 <LI><a href="#[49c]">fast_mp_montgomery_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[12]">for_command</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[14]">help_comm</a> from shell.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[1b]">hmac_sha256_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[1a]">hmac_sha_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[10]">ipaddr_comm</a> from shell.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[9c]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[bd]">main</a> from main.o(.text) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[e9]">mc0_DevCtrl</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[e4]">mc0_Init</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[e8]">mc0_RdInfo</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[e6]">mc0_RdSect</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[e5]">mc0_UnInit</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[e7]">mc0_WrSect</a> from fs_config.o(.text) referenced from fs_config.o(.constdata)
 <LI><a href="#[15]">md2_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[16]">md4_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[49b]">mp_dr_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[436]">mp_montgomery_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[494]">mp_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[499]">mp_reduce_2k</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[48e]">mp_reduce_2k_l</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[8b]">myDateCb</a> from client.o(.text) referenced from client.o(.text)
 <LI><a href="#[8f]">myHsDoneCb</a> from server.o(.text) referenced from server.o(.text)
 <LI><a href="#[8a]">myVerify</a> from client.o(.text) referenced from client.o(.text)
 <LI><a href="#[94]">my_Free_cb</a> from test.o(.text) referenced from test.o(.text)
 <LI><a href="#[95]">my_Malloc_cb</a> from test.o(.text) referenced from test.o(.text)
 <LI><a href="#[93]">my_Realloc_cb</a> from test.o(.text) referenced from test.o(.text)
 <LI><a href="#[89]">my_psk_client_cb</a> from client.o(.text) referenced from client.o(.text)
 <LI><a href="#[8e]">my_psk_server_cb</a> from server.o(.text) referenced from server.o(.text)
 <LI><a href="#[a3]">nbns_listener</a> from net_nbns_client.o(i.nbns_listener) referenced from net_nbns_client.o(i.net_nbns_client_init)
 <LI><a href="#[eb]">netCore_Thread</a> from net_sys.o(i.netCore_Thread) referenced from net_config.o(.constdata)
 <LI><a href="#[ec]">netETH_Thread</a> from net_eth.o(i.netETH_Thread) referenced from net_config.o(.constdata)
 <LI><a href="#[f6]">net_bsd_socket_init</a> from net_bsd.o(i.net_bsd_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[f7]">net_bsd_socket_run</a> from net_bsd.o(i.net_bsd_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[f9]">net_dhcp_client_init</a> from net_dhcp_client.o(i.net_dhcp_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[fa]">net_dhcp_client_run</a> from net_dhcp_client.o(i.net_dhcp_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[fb]">net_dns_client_init</a> from net_dns_client.o(i.net_dns_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[fc]">net_dns_client_run</a> from net_dns_client.o(i.net_dns_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[ed]">net_eth_iface_init</a> from net_eth.o(i.net_eth_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[ee]">net_eth_iface_run</a> from net_eth.o(i.net_eth_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[ef]">net_loop_iface_init</a> from net_loop.o(i.net_loop_iface_init) referenced from net_config.o(.constdata)
 <LI><a href="#[f0]">net_loop_iface_run</a> from net_loop.o(i.net_loop_iface_run) referenced from net_config.o(.constdata)
 <LI><a href="#[f8]">net_nbns_client_init</a> from net_nbns_client.o(i.net_nbns_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[f1]">net_ping_client_init</a> from net_ping.o(i.net_ping_client_init) referenced from net_config.o(.constdata)
 <LI><a href="#[f2]">net_ping_client_run</a> from net_ping.o(i.net_ping_client_run) referenced from net_config.o(.constdata)
 <LI><a href="#[ea]">net_sys_tick</a> from net_sys.o(i.net_sys_tick) referenced from net_config.o(.constdata)
 <LI><a href="#[f4]">net_tcp_socket_init</a> from net_tcp.o(i.net_tcp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[f5]">net_tcp_socket_run</a> from net_tcp.o(i.net_tcp_socket_run) referenced from net_config.o(.constdata)
 <LI><a href="#[f3]">net_udp_socket_init</a> from net_udp.o(i.net_udp_socket_init) referenced from net_config.o(.constdata)
 <LI><a href="#[ba]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[b8]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[23]">pwdbased_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[1d]">rabbit_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[1f]">random_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[19]">ripemd_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[20]">rsa_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[7f]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[80]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[82]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[81]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[f]">server_test</a> from server.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[18]">sha256_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[17]">sha_test</a> from test.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[11]">stack_comm</a> from shell.o(.text) referenced 4 times from shell.o(.data)
 <LI><a href="#[a4]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[a5]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[a6]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[a7]">svcKernelSysTick</a> from rt_cmsis.o(i.svcKernelSysTick) referenced from rt_cmsis.o(i.osKernelSysTick)
 <LI><a href="#[a8]">svcMutexCreate</a> from rt_cmsis.o(i.svcMutexCreate) referenced from rt_cmsis.o(i.osMutexCreate)
 <LI><a href="#[a9]">svcMutexDelete</a> from rt_cmsis.o(i.svcMutexDelete) referenced from rt_cmsis.o(i.osMutexDelete)
 <LI><a href="#[aa]">svcMutexRelease</a> from rt_cmsis.o(i.svcMutexRelease) referenced from rt_cmsis.o(i.osMutexRelease)
 <LI><a href="#[ab]">svcMutexWait</a> from rt_cmsis.o(i.svcMutexWait) referenced from rt_cmsis.o(i.osMutexWait)
 <LI><a href="#[ac]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[ad]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[ae]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[af]">svcSignalClear</a> from rt_cmsis.o(i.svcSignalClear) referenced from rt_cmsis.o(i.osSignalClear)
 <LI><a href="#[b0]">svcSignalSet</a> from rt_cmsis.o(i.svcSignalSet) referenced from rt_cmsis.o(i.osSignalSet)
 <LI><a href="#[b1]">svcSignalWait</a> from rt_cmsis.o(i.svcSignalWait) referenced from rt_cmsis.o(i.osSignalWait)
 <LI><a href="#[b2]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[b3]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[b3]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadGetId)
 <LI><a href="#[b4]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[b4]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadTerminate)
 <LI><a href="#[b5]">svcThreadYield</a> from rt_cmsis.o(i.svcThreadYield) referenced from rt_cmsis.o(i.osThreadYield)
 <LI><a href="#[b6]">svcTimerCreate</a> from rt_cmsis.o(i.svcTimerCreate) referenced from rt_cmsis.o(i.osTimerCreate)
 <LI><a href="#[b7]">svcTimerStart</a> from rt_cmsis.o(i.svcTimerStart) referenced from rt_cmsis.o(i.osTimerStart)
 <LI><a href="#[88]">wolfSSLv23_client_method_ex</a> from tls.o(.text) referenced from client.o(.text)
 <LI><a href="#[8d]">wolfSSLv23_server_method_ex</a> from tls.o(.text) referenced from server.o(.text)
 <LI><a href="#[87]">wolfTLSv1_2_client_method_ex</a> from tls.o(.text) referenced from client.o(.text)
 <LI><a href="#[8c]">wolfTLSv1_2_server_method_ex</a> from tls.o(.text) referenced from server.o(.text)
 <LI><a href="#[d]">wolfcrypt_test</a> from test.o(.text) referenced 4 times from shell.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[fd]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[107]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6d5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6d6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6d7]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6d8]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6d9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[10a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[52f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[10e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[6da]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[11e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6db]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[110]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6dc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[6dd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[6de]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6df]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6e0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[114]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[6e1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6e2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[115]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[6e3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6e4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6e5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6e6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6e7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6e8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6e9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[117]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[6ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6ec]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[6ed]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6ee]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[6ef]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[6f0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[6f1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[6f2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6f3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[6f4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[6f5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[6f6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[108]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[6f7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[11b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[6f8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[11f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postli_1 &rArr; _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[121]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; shell_main &rArr; getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[540]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[123]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[6f9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[125]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[120]"></a>_platform_post_lib_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _platform_post_lib_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postli_1
</UL>

<P><STRONG><a name="[641]"></a>__asm___9_net_sys_c_71b12f21__sys_get_ver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[6fa]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6af]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[6fb]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6fc]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6fd]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[6fe]"></a>SystemClock_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[6ff]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[bd]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = main &rArr; shell_main &rArr; getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>command_not_found</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = command_not_found &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>wolfssl_fgets</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wolfssl_fgets &rArr; putc &rArr; fputc &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[11]"></a>stack_comm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = stack_comm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[700]"></a>stack_fill</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>stack_check</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13a]"></a>exit_command</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[132]"></a>shell_main</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = shell_main &rArr; getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMutex
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_comm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>current_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, time-cortexm3-4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = current_time &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
</UL>

<P><STRONG><a name="[b8]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[fe]"></a>os_tick_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[ff]"></a>os_tick_val</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[100]"></a>os_tick_ovf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelSysTick
</UL>

<P><STRONG><a name="[101]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[102]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[103]"></a>__user_perthread_libspace</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[104]"></a>_mutex_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[105]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[106]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[6c]"></a>ETH_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDIO_IRQHandler</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>ITM_SendChar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[162]"></a>ITM_ReceiveChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[159]"></a>_sys_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[15b]"></a>_sys_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[15d]"></a>_sys_write</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[160]"></a>_sys_read</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_ReceiveChar
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[535]"></a>_sys_istty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[163]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[165]"></a>_sys_flen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[16c]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
</UL>

<P><STRONG><a name="[16a]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[16e]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[16d]"></a>HAL_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[701]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
</UL>

<P><STRONG><a name="[16f]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f2xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[702]"></a>HAL_SuspendTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[703]"></a>HAL_ResumeTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[704]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[705]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[706]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[707]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[708]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[709]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[70a]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[70b]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[70c]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[70d]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[70e]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[70f]"></a>HAL_GetUID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[169]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[153]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[151]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[710]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[711]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[712]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[713]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[714]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[715]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[716]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[717]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[718]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[719]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[14f]"></a>HAL_DMA_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[152]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[175]"></a>HAL_DMA_Start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[156]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupTransfer
</UL>

<P><STRONG><a name="[157]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortTransfer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
</UL>

<P><STRONG><a name="[71a]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[158]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[71b]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[71c]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[71d]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[71e]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, stm32f2xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
</UL>

<P><STRONG><a name="[14b]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, stm32f2xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uninitialize
</UL>

<P><STRONG><a name="[155]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCD
</UL>

<P><STRONG><a name="[71f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[720]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[721]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[17c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[17e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[17f]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[722]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[724]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[725]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[726]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[727]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[569]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[84]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[728]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[184]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[186]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[188]"></a>fs_mutex_delete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[607]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[18a]"></a>fs_set_rtos_delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_power
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
</UL>

<P><STRONG><a name="[18b]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[633]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[194]"></a>fs_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[195]"></a>fdelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[142]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[582]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[5f6]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[729]"></a>efs_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[5f7]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[72a]"></a>efs_unmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[583]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[57a]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[585]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[589]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[57c]"></a>efs_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[57e]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[587]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[72b]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[72c]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[58b]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[72d]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[72e]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[72f]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[730]"></a>efs_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[731]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[732]"></a>efs_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[5f2]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[733]"></a>fat_jour_prep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[734]"></a>fsj_set_space</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[5b8]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[735]"></a>fsj_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)

<P><STRONG><a name="[5ec]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[5e5]"></a>elink_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5ee]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[602]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[5fc]"></a>elink_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
</UL>

<P><STRONG><a name="[605]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[199]"></a>netos_thread_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netos_thread_create &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[19a]"></a>netos_thread_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_suspend
</UL>

<P><STRONG><a name="[19b]"></a>netos_thread_pass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[19c]"></a>netos_timer_create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_timer_create &rArr; osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[19e]"></a>netos_timer_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[1a0]"></a>netos_mutex_create</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_mutex_create &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[1a1]"></a>netos_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[1a2]"></a>netos_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[1a3]"></a>netos_flag_wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_suspend
</UL>

<P><STRONG><a name="[1a5]"></a>netos_flag_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_notify
</UL>

<P><STRONG><a name="[1a7]"></a>netos_flag_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalClear
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[1a9]"></a>netos_delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1aa]"></a>netif_create</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = netif_create &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[1ac]"></a>netif_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[1ae]"></a>netif_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[66b]"></a>net_igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[667]"></a>net_igmp_collect_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
</UL>

<P><STRONG><a name="[662]"></a>net_igmp_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[670]"></a>net_ppp_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[671]"></a>net_slip_send_frame</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[66e]"></a>net_ip4_frag_add</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
</UL>

<P><STRONG><a name="[66f]"></a>net_ip4_frag_get</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[736]"></a>netSNTPc_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>net_sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[e]"></a>client_test</STRONG> (Thumb, 3344 bytes, Stack size 4392 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 13264 + Unknown Stack Size
<LI>Call Chain = client_test &rArr; wolfSSL_CTX_load_verify_locations &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_using_nonblock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_session
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_session_reused
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_session
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_ciphers
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_check_domain_name
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetObjectSize
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_chain_file
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_PrivateKey_file
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_verify
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_psk_client_callback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_group_messages
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_cipher_list
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_locations
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetMinDhKey_Sz
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Connect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetopt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>echoclient_test</STRONG> (Thumb, 574 bytes, Stack size 2208 bytes, echoclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 11080 + Unknown Stack Size
<LI>Call Chain = echoclient_test &rArr; wolfSSL_CTX_load_verify_locations &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_locations
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_client_method
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>echoserver_test</STRONG> (Thumb, 1470 bytes, Stack size 576 bytes, echoserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9440 + Unknown Stack Size
<LI>Call Chain = echoserver_test &rArr; wolfSSL_CTX_use_PrivateKey_file &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_PrivateKey_file
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_server_method
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_file
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[211]"></a>ServerEchoData</STRONG> (Thumb, 408 bytes, Stack size 80 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7120 + Unknown Stack Size
<LI>Call Chain = ServerEchoData &rArr; wolfSSL_write &rArr; SendData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys_ex
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[f]"></a>server_test</STRONG> (Thumb, 1956 bytes, Stack size 384 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 9256 + Unknown Stack Size
<LI>Call Chain = server_test &rArr; wolfSSL_CTX_load_verify_locations &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_using_nonblock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_chain_file
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_PrivateKey_file
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_verify
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_group_messages
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_cipher_list
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_locations
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetMinDhKey_Sz
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_state
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetHsDoneCb
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_psk_identity_hint
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_psk_server_callback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetMinRsaKey_Sz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetMinEccKey_Sz
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerRead
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Accept
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys_ex
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetopt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[2b0]"></a>IsTLS</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
</UL>

<P><STRONG><a name="[26b]"></a>IsAtLeastTLSv1_2</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_make_eap_keys
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsHandshakeHash
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PickHashSigAlgo
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCertHashes
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashInput
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutputRaw
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[2a1]"></a>IsAtLeastTLSv1_3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_curve_name
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PickHashSigAlgo
</UL>

<P><STRONG><a name="[366]"></a>InitSSL_Method</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method_ex
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_client_method_ex
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_server_method_ex
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_server_method_ex
</UL>

<P><STRONG><a name="[222]"></a>InitSSL_Ctx</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitSSL_Ctx &rArr; wolfSSL_CertManagerNew_ex &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMutex
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew_ex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new_ex
</UL>

<P><STRONG><a name="[224]"></a>SSL_CtxResourceFree</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSL_CtxResourceFree &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>

<P><STRONG><a name="[227]"></a>FreeSSL_Ctx</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FreeSSL_Ctx &rArr; SSL_CtxResourceFree &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeMutex
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CtxResourceFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
</UL>

<P><STRONG><a name="[251]"></a>InitCiphers</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
</UL>

<P><STRONG><a name="[229]"></a>FreeCiphers</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreeCiphers &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Free
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
</UL>

<P><STRONG><a name="[252]"></a>InitCipherSpecs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
</UL>

<P><STRONG><a name="[22c]"></a>InitSuitesHashSigAlgo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitSuitesHashSigAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
</UL>

<P><STRONG><a name="[22b]"></a>InitSuites</STRONG> (Thumb, 440 bytes, Stack size 44 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitSuites &rArr; InitSuitesHashSigAlgo
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuitesHashSigAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_psk_server_callback
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_psk_client_callback
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetVersion
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
</UL>

<P><STRONG><a name="[22f]"></a>InitX509Name</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, internal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitX509
</UL>

<P><STRONG><a name="[22d]"></a>FreeX509Name</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeX509
</UL>

<P><STRONG><a name="[22e]"></a>InitX509</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitX509Name
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[230]"></a>FreeX509</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAltNames
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeX509Name
</UL>

<P><STRONG><a name="[232]"></a>RsaSign</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424 + Unknown Stack Size
<LI>Call Chain = RsaSign &rArr; wc_RsaSSL_Sign &rArr; RsaPublicEncryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Sign
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
</UL>

<P><STRONG><a name="[234]"></a>RsaVerify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = RsaVerify &rArr; wc_RsaSSL_VerifyInline &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_VerifyInline
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[236]"></a>VerifyRsaSign</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = VerifyRsaSign &rArr; wc_RsaSSL_VerifyInline &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_VerifyInline
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
</UL>

<P><STRONG><a name="[237]"></a>RsaDec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = RsaDec &rArr; wc_RsaPrivateDecryptInline &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSetRNG
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecryptInline
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[23a]"></a>RsaEnc</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424 + Unknown Stack Size
<LI>Call Chain = RsaEnc &rArr; wc_RsaPublicEncrypt &rArr; RsaPublicEncryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
</UL>

<P><STRONG><a name="[23c]"></a>EccSign</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5344<LI>Call Chain = EccSign &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
</UL>

<P><STRONG><a name="[23e]"></a>EccVerify</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5144<LI>Call Chain = EccVerify &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[240]"></a>EccSharedSecret</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4792<LI>Call Chain = EccSharedSecret &rArr; wc_ecc_shared_secret &rArr; wc_ecc_shared_secret_ex &rArr; wc_ecc_shared_secret_gen &rArr; wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[242]"></a>EccMakeKey</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = EccMakeKey &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
</UL>

<P><STRONG><a name="[246]"></a>DhGenKeyPair</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176<LI>Call Chain = DhGenKeyPair &rArr; wc_DhGenerateKeyPair &rArr; GeneratePublicDh &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhGenerateKeyPair
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
</UL>

<P><STRONG><a name="[248]"></a>DhAgree</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3304<LI>Call Chain = DhAgree &rArr; wc_DhAgree &rArr; wc_DhAgree_Sync &rArr; wc_DhCheckPubKey &rArr; wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[24a]"></a>SetSSL_CTX</STRONG> (Thumb, 644 bytes, Stack size 56 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetSSL_CTX &rArr; wolfSSL_CTX_free &rArr; FreeSSL_Ctx &rArr; SSL_CtxResourceFree &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
</UL>

<P><STRONG><a name="[24c]"></a>FreeHandshakeHashes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FreeHandshakeHashes &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHandshakeHashes
</UL>

<P><STRONG><a name="[24e]"></a>InitHandshakeHashes</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InitHandshakeHashes &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256_ex
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeHashes
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
</UL>

<P><STRONG><a name="[250]"></a>InitSSL</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = InitSSL &rArr; wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHandshakeHashes
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCipherSpecs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCiphers
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
</UL>

<P><STRONG><a name="[254]"></a>FreeArrays</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeArrays &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_FreeArrays
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
</UL>

<P><STRONG><a name="[256]"></a>FreeKey</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FreeKey &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
</UL>

<P><STRONG><a name="[25a]"></a>AllocKey</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AllocKey &rArr; wc_ecc_init_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[25f]"></a>FreeKeyExchange</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FreeKeyExchange &rArr; FreeKey &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[260]"></a>ShrinkOutputBuffer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ShrinkOutputBuffer &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
</UL>

<P><STRONG><a name="[261]"></a>ShrinkInputBuffer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShrinkInputBuffer &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
</UL>

<P><STRONG><a name="[262]"></a>SSL_ResourceFree</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SSL_ResourceFree &rArr; FreeKeyExchange &rArr; FreeKey &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_UnloadCertsKeys
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkInputBuffer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkOutputBuffer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeArrays
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeHashes
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCiphers
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
</UL>

<P><STRONG><a name="[264]"></a>FreeHandshakeResources</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FreeHandshakeResources &rArr; FreeKey &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_UnloadCertsKeys
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkInputBuffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeArrays
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeHashes
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_FreeHandshakeResources
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[265]"></a>FreeSSL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FreeSSL &rArr; SSL_ResourceFree &rArr; FreeKeyExchange &rArr; FreeKey &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
</UL>

<P><STRONG><a name="[268]"></a>LowResTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LowResTimer &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSessionClient
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
</UL>

<P><STRONG><a name="[26a]"></a>HashOutputRaw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HashOutputRaw &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
</UL>

<P><STRONG><a name="[26d]"></a>HashOutput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HashOutput &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
</UL>

<P><STRONG><a name="[26e]"></a>HashInput</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HashInput &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[26f]"></a>SendBuffered</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendBuffered &rArr; ShrinkOutputBuffer &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkOutputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[270]"></a>GrowInputBuffer</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GrowInputBuffer &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputData
</UL>

<P><STRONG><a name="[271]"></a>CheckAvailableSize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CheckAvailableSize &rArr; GrowOutputBuffer &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowOutputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>

<P><STRONG><a name="[273]"></a>MatchDomainName</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MatchDomainName &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAltNames
</UL>

<P><STRONG><a name="[275]"></a>CheckAltNames</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CheckAltNames &rArr; MatchDomainName &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchDomainName
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[27e]"></a>BuildMessage</STRONG> (Thumb, 524 bytes, Stack size 104 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecordHeader
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetOutputSize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>

<P><STRONG><a name="[282]"></a>SendAlert</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = SendAlert &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[283]"></a>ProcessPeerCerts</STRONG> (Thumb, 1424 bytes, Stack size 160 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6800<LI>Call Chain = ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_size
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlreadySigner
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAltNames
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchDomainName
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c24to32
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[28f]"></a>DoFinished</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DoFinished &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[296]"></a>BuildCertHashes</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BuildCertHashes &rArr; wc_Sha256GetHash &rArr; wc_Sha256Final &rArr; Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaGetHash
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256GetHash
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[2a0]"></a>PickHashSigAlgo</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PickHashSigAlgo
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_3
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSigAlg
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareSuites
</UL>

<P><STRONG><a name="[2a6]"></a>MatchSuite</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MatchSuite &rArr; CompareSuites &rArr; SetCipherSpecs &rArr; VerifyClientSuite
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareSuites
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
</UL>

<P><STRONG><a name="[2a7]"></a>DoClientHello</STRONG> (Thumb, 798 bytes, Stack size 424 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = DoClientHello &rArr; DeriveTlsKeys &rArr; _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchSuite
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[2b1]"></a>CompleteServerHello</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = CompleteServerHello &rArr; DeriveTlsKeys &rArr; _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherSpecs
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
</UL>

<P><STRONG><a name="[2b3]"></a>CheckVersion</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
</UL>

<P><STRONG><a name="[2b2]"></a>DoServerHello</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = DoServerHello &rArr; CompleteServerHello &rArr; DeriveTlsKeys &rArr; _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVersion
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompleteServerHello
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[2bf]"></a>DoApplicationData</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = DoApplicationData &rArr; SendAlert &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CipherHasExpIV
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2c4]"></a>ProcessReply</STRONG> (Thumb, 734 bytes, Stack size 48 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6944<LI>Call Chain = ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeysSide
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_3
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAlert
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CipherHasExpIV
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordHeader
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyMac
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SanityCheckMsgReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2ca]"></a>SendChangeCipher</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = SendChangeCipher &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2cb]"></a>SendFinished</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = SendFinished &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeysSide
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHandShakeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2ce]"></a>SendCertificate</STRONG> (Thumb, 792 bytes, Stack size 112 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = SendCertificate &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutputRaw
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHandShakeHeader
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecordHeader
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2d0]"></a>SendCertificateRequest</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SendCertificateRequest &rArr; HashOutput &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[300]"></a>SendCertificateStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2d2]"></a>SendData</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7032 + Unknown Stack Size
<LI>Call Chain = SendData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_negotiate
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
</UL>

<P><STRONG><a name="[2d4]"></a>ReceiveData</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6992 + Unknown Stack Size
<LI>Call Chain = ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_negotiate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkInputBuffer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read_internal
</UL>

<P><STRONG><a name="[2d5]"></a>wolfSSL_ERR_reason_error_string</STRONG> (Thumb, 5010 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetErrorString
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
</UL>

<P><STRONG><a name="[2d7]"></a>SetErrorString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetErrorString &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_reason_error_string
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_print_errors_fp
</UL>

<P><STRONG><a name="[2fa]"></a>GetCipherNames</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_ciphers
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_list
</UL>

<P><STRONG><a name="[2fb]"></a>GetCipherNamesSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_ciphers
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_list
</UL>

<P><STRONG><a name="[2d8]"></a>GetCipherNameInternal</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name_internal
</UL>

<P><STRONG><a name="[2da]"></a>wolfSSL_get_cipher_name_internal</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CIPHER_get_name
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCipherNameInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_list_ex
</UL>

<P><STRONG><a name="[2fe]"></a>wolfSSL_get_cipher_name_from_suite</STRONG> (Thumb, 2640 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CIPHER_get_name
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_shared_ciphers
</UL>

<P><STRONG><a name="[2db]"></a>SetCipherList</STRONG> (Thumb, 1354 bytes, Stack size 112 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetCipherList &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuitesHashSigAlgo
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_cipher_list
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_cipher_list
</UL>

<P><STRONG><a name="[2dc]"></a>SendClientHello</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = SendClientHello &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
</UL>

<P><STRONG><a name="[2dd]"></a>VerifyClientSuite</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyClientSuite
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CipherRequires
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherSpecs
</UL>

<P><STRONG><a name="[2de]"></a>SendClientKeyExchange</STRONG> (Thumb, 1832 bytes, Stack size 88 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5112 + Unknown Stack Size
<LI>Call Chain = SendClientKeyExchange &rArr; EccMakeKey &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DhAgree
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DhGenKeyPair
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccMakeKey
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccSharedSecret
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEnc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
</UL>

<P><STRONG><a name="[2e0]"></a>DecodePrivateKey</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = DecodePrivateKey &rArr; wc_EccPrivateKeyDecode &rArr; wc_ecc_import_private_key_ex &rArr; wc_EccPublicKeyDecode &rArr; wc_ecc_import_x963_ex &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_size
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_size
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
</UL>

<P><STRONG><a name="[2e2]"></a>SendCertificateVerify</STRONG> (Thumb, 882 bytes, Stack size 104 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5448 + Unknown Stack Size
<LI>Call Chain = SendCertificateVerify &rArr; EccSign &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCertHashes
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccSign
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRsaSign
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSign
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeHash
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigest
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSigAlg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
</UL>

<P><STRONG><a name="[2e4]"></a>SendServerHello</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = SendServerHello &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2e5]"></a>SendServerKeyExchange</STRONG> (Thumb, 2648 bytes, Stack size 112 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5456 + Unknown Stack Size
<LI>Call Chain = SendServerKeyExchange &rArr; EccSign &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_size
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DhGenKeyPair
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccMakeKey
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccSign
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRsaSign
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSign
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeHash
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSigAlg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashAlgoToType
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurveId
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2e7]"></a>SendServerHelloDone</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SendServerHelloDone &rArr; HashOutput &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>

<P><STRONG><a name="[2a5]"></a>SetCipherSpecs</STRONG> (Thumb, 802 bytes, Stack size 40 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetCipherSpecs &rArr; VerifyClientSuite
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyClientSuite
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompleteServerHello
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareSuites
</UL>

<P><STRONG><a name="[2c7]"></a>SetKeysSide</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = SetKeysSide &rArr; SetKeys &rArr; wc_CamelliaSetKey &rArr; camellia_setup256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2f1]"></a>StoreKeys</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StoreKeys
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
</UL>

<P><STRONG><a name="[29f]"></a>MakeMasterSecret</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = MakeMasterSecret &rArr; MakeTlsMasterSecret &rArr; DeriveTlsKeys &rArr; _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[2f3]"></a>mystrnstr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mystrnstr &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
</UL>

<P><STRONG><a name="[1ed]"></a>wolfSSL_CTX_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wolfSSL_CTX_free &rArr; FreeSSL_Ctx &rArr; SSL_CtxResourceFree &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCA
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCABuffer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_KeyPemToDer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new_ex
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
</UL>

<P><STRONG><a name="[2f4]"></a>wolfSSL_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wolfSSL_Init &rArr; wc_InitMutex &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMutex
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfCrypt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_library_init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new_ex
</UL>

<P><STRONG><a name="[2f6]"></a>wolfSSL_CTX_new_ex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wolfSSL_CTX_new_ex &rArr; InitSSL_Ctx &rArr; wolfSSL_CertManagerNew_ex &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
</UL>

<P><STRONG><a name="[1eb]"></a>wolfSSL_CTX_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wolfSSL_CTX_new &rArr; wolfSSL_CTX_new_ex &rArr; InitSSL_Ctx &rArr; wolfSSL_CertManagerNew_ex &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCA
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCABuffer
</UL>

<P><STRONG><a name="[1cb]"></a>wolfSSL_new</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = wolfSSL_new &rArr; InitSSL &rArr; wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[1d0]"></a>wolfSSL_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wolfSSL_free &rArr; FreeSSL &rArr; SSL_ResourceFree &rArr; FreeKeyExchange &rArr; FreeKey &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[737]"></a>wolfSSL_is_server</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[738]"></a>wolfSSL_use_old_poly</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>wolfSSL_set_write_fd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
</UL>

<P><STRONG><a name="[2f7]"></a>wolfSSL_set_read_fd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
</UL>

<P><STRONG><a name="[1cd]"></a>wolfSSL_set_fd</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wolfSSL_set_fd
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_read_fd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_write_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[2f9]"></a>wolfSSL_get_cipher_list</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCipherNamesSize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCipherNames
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_list_ex
</UL>

<P><STRONG><a name="[2fc]"></a>wolfSSL_get_cipher_list_ex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_list
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name_internal
</UL>

<P><STRONG><a name="[1e9]"></a>wolfSSL_get_ciphers</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wolfSSL_get_ciphers &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCipherNamesSize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCipherNames
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[2fd]"></a>wolfSSL_get_shared_ciphers</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name_from_suite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1c9]"></a>wolfSSL_get_fd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Connect
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Accept
</UL>

<P><STRONG><a name="[36b]"></a>wolfSSL_get_using_nonblock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmbedReceive
</UL>

<P><STRONG><a name="[36a]"></a>wolfSSL_dtls</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmbedReceive
</UL>

<P><STRONG><a name="[1f6]"></a>wolfSSL_set_using_nonblock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1c1]"></a>wolfSSL_dtls_set_peer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
</UL>

<P><STRONG><a name="[739]"></a>wolfSSL_dtls_get_peer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>wolfSSL_connect</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6960 + Unknown Stack Size
<LI>Call Chain = wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Connect
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect_cert
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_negotiate
</UL>

<P><STRONG><a name="[20b]"></a>wolfSSL_accept</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6960 + Unknown Stack Size
<LI>Call Chain = wolfSSL_accept &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateStatus
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_negotiate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Accept
</UL>

<P><STRONG><a name="[2d3]"></a>wolfSSL_negotiate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6968 + Unknown Stack Size
<LI>Call Chain = wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[73a]"></a>wolfSSL_GetRNG</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>wolfSSL_GetObjectSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[73b]"></a>wolfSSL_CTX_GetObjectSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[73c]"></a>wolfSSL_METHOD_GetObjectSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>wolfSSL_GetMaxOutputSize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetOutputSize
</UL>

<P><STRONG><a name="[301]"></a>wolfSSL_GetOutputSize</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetMaxOutputSize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
</UL>

<P><STRONG><a name="[216]"></a>wolfSSL_CTX_SetMinEccKey_Sz</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[73d]"></a>wolfSSL_SetMinEccKey_Sz</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>wolfSSL_CTX_SetMinRsaKey_Sz</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[73e]"></a>wolfSSL_SetMinRsaKey_Sz</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>wolfSSL_SetTmpDH</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wolfSSL_SetTmpDH &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
</UL>

<P><STRONG><a name="[304]"></a>wolfSSL_CTX_SetTmpDH</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wolfSSL_CTX_SetTmpDH &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
</UL>

<P><STRONG><a name="[1ef]"></a>wolfSSL_CTX_SetMinDhKey_Sz</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[73f]"></a>wolfSSL_SetMinDhKey_Sz</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>wolfSSL_GetDhKey_Sz</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
</UL>

<P><STRONG><a name="[1db]"></a>wolfSSL_write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7040 + Unknown Stack Size
<LI>Call Chain = wolfSSL_write &rArr; SendData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_send
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWrite
</UL>

<P><STRONG><a name="[306]"></a>wolfSSL_peek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read_internal
</UL>

<P><STRONG><a name="[1dd]"></a>wolfSSL_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7000 + Unknown Stack Size
<LI>Call Chain = wolfSSL_read &rArr; wolfSSL_read_internal &rArr; ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_recv
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerRead
</UL>

<P><STRONG><a name="[740]"></a>wolfSSL_SetDevId</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[741]"></a>wolfSSL_CTX_SetDevId</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>wolfSSL_CTX_GetDevId</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[322]"></a>wolfSSL_CTX_GetHeap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
</UL>

<P><STRONG><a name="[307]"></a>wolfSSL_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
</UL>

<P><STRONG><a name="[308]"></a>wolfSSL_recv</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
</UL>

<P><STRONG><a name="[1ce]"></a>wolfSSL_shutdown</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7016 + Unknown Stack Size
<LI>Call Chain = wolfSSL_shutdown &rArr; wolfSSL_read &rArr; wolfSSL_read_internal &rArr; ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[21d]"></a>wolfSSL_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[1c8]"></a>wolfSSL_get_error</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Connect
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerRead
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Accept
</UL>

<P><STRONG><a name="[742]"></a>wolfSSL_get_alert_history</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[743]"></a>wolfSSL_want_read</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[744]"></a>wolfSSL_want_write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>wolfSSL_ERR_error_string</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wolfSSL_ERR_error_string &rArr; SetErrorString &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRead
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDateCb
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myVerify
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string_n
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerRead
</UL>

<P><STRONG><a name="[309]"></a>wolfSSL_ERR_error_string_n</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[745]"></a>wolfSSL_KeepArrays</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>wolfSSL_FreeArrays</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeArrays
</UL>

<P><STRONG><a name="[746]"></a>wolfSSL_KeepHandshakeResources</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>wolfSSL_FreeHandshakeResources</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
</UL>

<P><STRONG><a name="[747]"></a>wolfSSL_CTX_UseClientSuites</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[748]"></a>wolfSSL_UseClientSuites</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>wolfSSL_GetMacSecret</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[288]"></a>AllocDer</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AllocDer &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[225]"></a>FreeDer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeDer &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerifyBuffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_KeyPemToDer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertPemToDer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_UnloadCertsKeys
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeX509
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CtxResourceFree
</UL>

<P><STRONG><a name="[749]"></a>wolfSSL_CTX_GetCertManager</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>wolfSSL_CertManagerFree</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignerTable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCA
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCABuffer
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew_ex
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CtxResourceFree
</UL>

<P><STRONG><a name="[223]"></a>wolfSSL_CertManagerNew_ex</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wolfSSL_CertManagerNew_ex &rArr; wolfSSL_CertManagerFree &rArr; FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMutex
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Ctx
</UL>

<P><STRONG><a name="[30d]"></a>wolfSSL_CertManagerNew</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew_ex
</UL>

<P><STRONG><a name="[30e]"></a>wolfSSL_CertManagerUnloadCAs</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignerTable
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_UnloadCAs
</UL>

<P><STRONG><a name="[30f]"></a>PemToDer</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditional
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decode
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrnstr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerifyBuffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_KeyPemToDer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertPemToDer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
</UL>

<P><STRONG><a name="[312]"></a>wolfSSL_CertPemToDer</STRONG> (Thumb, 204 bytes, Stack size 168 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[313]"></a>wolfSSL_KeyPemToDer</STRONG> (Thumb, 110 bytes, Stack size 168 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[314]"></a>wolfSSL_ERR_print_errors_fp</STRONG> (Thumb, 30 bytes, Stack size 96 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[74a]"></a>wolfSSL_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>wolfSSL_CTX_set_group_messages</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[315]"></a>wolfSSL_connect_cert</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
</UL>

<P><STRONG><a name="[74b]"></a>wolfSSL_set_group_messages</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>wolfSSL_CTX_SetMinVersion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMinVersionHelper
</UL>

<P><STRONG><a name="[318]"></a>wolfSSL_SetMinVersion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMinVersionHelper
</UL>

<P><STRONG><a name="[74c]"></a>wolfSSL_GetVersion</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>wolfSSL_SetVersion</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
</UL>

<P><STRONG><a name="[287]"></a>AlreadySigner</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AlreadySigner &rArr; wc_UnLockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSigner
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[31c]"></a>GetCA</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCA &rArr; wc_UnLockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSigner
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
</UL>

<P><STRONG><a name="[31d]"></a>GetCAByName</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetCAByName &rArr; wc_UnLockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
</UL>

<P><STRONG><a name="[289]"></a>AddCA</STRONG> (Thumb, 414 bytes, Stack size 872 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6640<LI>Call Chain = AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSigner
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSigner
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSigner
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlreadySigner
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[324]"></a>ProcessBuffer</STRONG> (Thumb, 1172 bytes, Stack size 1040 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7680<LI>Call Chain = ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_GetHeap
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_GetDevId
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_size
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_use_certificate_chain_buffer
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_use_certificate_chain_buffer_format
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_use_PrivateKey_buffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_use_certificate_buffer
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_chain_buffer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_chain_buffer_format
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_PrivateKey_buffer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_buffer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_buffer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessChainBuffer
</UL>

<P><STRONG><a name="[328]"></a>wolfSSL_CTX_load_verify_buffer</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessChainBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCABuffer
</UL>

<P><STRONG><a name="[329]"></a>wolfSSL_CertManagerLoadCABuffer</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_buffer
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
</UL>

<P><STRONG><a name="[74d]"></a>wolfSSL_CertManagerEnableCRL</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[74e]"></a>wolfSSL_CertManagerDisableCRL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>wolfSSL_CertManagerVerifyBuffer</STRONG> (Thumb, 124 bytes, Stack size 1000 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
</UL>

<P><STRONG><a name="[74f]"></a>wolfSSL_CertManagerEnableOCSP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[750]"></a>wolfSSL_CertManagerDisableOCSP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[751]"></a>wolfSSL_CertManagerEnableOCSPStapling</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[752]"></a>wolfSSL_CertManagerDisableOCSPStapling</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>ProcessFile</STRONG> (Thumb, 232 bytes, Stack size 1096 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8848<LI>Call Chain = ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_GetHeap
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessChainBuffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_chain_file
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_PrivateKey_file
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_locations
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_certificate_file
</UL>

<P><STRONG><a name="[1f3]"></a>wolfSSL_CTX_load_verify_locations</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8872<LI>Call Chain = wolfSSL_CTX_load_verify_locations &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCA
</UL>

<P><STRONG><a name="[331]"></a>wolfSSL_CertManagerVerify</STRONG> (Thumb, 156 bytes, Stack size 1056 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerifyBuffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[332]"></a>wolfSSL_CertManagerLoadCA</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_locations
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
</UL>

<P><STRONG><a name="[333]"></a>wolfSSL_CTX_check_private_key</STRONG> (Thumb, 82 bytes, Stack size 840 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
</UL>

<P><STRONG><a name="[208]"></a>wolfSSL_CTX_use_certificate_file</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8864<LI>Call Chain = wolfSSL_CTX_use_certificate_file &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
</UL>

<P><STRONG><a name="[1f2]"></a>wolfSSL_CTX_use_PrivateKey_file</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8864<LI>Call Chain = wolfSSL_CTX_use_PrivateKey_file &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[753]"></a>wolfSSL_CTX_set_verify_depth</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[754]"></a>wolfSSL_get_verify_depth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[755]"></a>wolfSSL_CTX_get_verify_depth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>wolfSSL_CTX_use_certificate_chain_file</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8864<LI>Call Chain = wolfSSL_CTX_use_certificate_chain_file &rArr; ProcessFile &rArr; ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[337]"></a>wolfSSL_CTX_SetTmpDH_buffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = wolfSSL_CTX_SetTmpDH_buffer &rArr; wolfSSL_SetTmpDH_buffer_wrapper &rArr; PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
</UL>

<P><STRONG><a name="[338]"></a>wolfSSL_SetTmpDH_buffer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348<LI>Call Chain = wolfSSL_SetTmpDH_buffer &rArr; wolfSSL_SetTmpDH_buffer_wrapper &rArr; PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
</UL>

<P><STRONG><a name="[20a]"></a>wolfSSL_SetTmpDH_file</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2420<LI>Call Chain = wolfSSL_SetTmpDH_file &rArr; wolfSSL_SetTmpDH_file_wrapper &rArr; wolfSSL_SetTmpDH_buffer &rArr; wolfSSL_SetTmpDH_buffer_wrapper &rArr; PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
</UL>

<P><STRONG><a name="[33a]"></a>wolfSSL_CTX_SetTmpDH_file</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
</UL>

<P><STRONG><a name="[1f4]"></a>wolfSSL_CTX_set_verify</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wolfSSL_CTX_set_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[756]"></a>wolfSSL_set_verify</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[757]"></a>wolfSSL_SetCertCbCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[758]"></a>wolfSSL_CTX_SetCACb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>GetSession</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GetSession &rArr; HashSession &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSession
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_session
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
</UL>

<P><STRONG><a name="[1cf]"></a>wolfSSL_get_session</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = wolfSSL_get_session &rArr; GetSession &rArr; HashSession &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[33c]"></a>SetSession</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetSession &rArr; wc_UnLockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_session
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetServerID
</UL>

<P><STRONG><a name="[1cc]"></a>wolfSSL_set_session</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wolfSSL_set_session &rArr; SetSession &rArr; wc_UnLockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[33d]"></a>GetSessionClient</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSession
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetServerID
</UL>

<P><STRONG><a name="[33e]"></a>wolfSSL_SetServerID</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSessionClient
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[759]"></a>wolfSSL_load_error_strings</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>wolfSSL_library_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Init
</UL>

<P><STRONG><a name="[75a]"></a>wolfSSL_CTX_set_session_cache_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>wolfSSL_CTX_set_cipher_list</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wolfSSL_CTX_set_cipher_list &rArr; SetCipherList &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[340]"></a>wolfSSL_set_cipher_list</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
</UL>

<P><STRONG><a name="[219]"></a>wolfSSL_SetHsDoneCb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[341]"></a>wolfSSL_Cleanup</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfCrypt_Cleanup
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeMutex
</UL>

<P><STRONG><a name="[75b]"></a>wolfSSL_flush_sessions</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[75c]"></a>wolfSSL_set_timeout</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[75d]"></a>wolfSSL_CTX_set_timeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>AddSession</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = AddSession &rArr; HashSession &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSession
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
</UL>

<P><STRONG><a name="[1f5]"></a>wolfSSL_check_domain_name</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wolfSSL_check_domain_name &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[75e]"></a>wolfSSL_set_compression</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>wolfSSL_CTX_set_psk_client_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[343]"></a>wolfSSL_set_psk_client_callback</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
</UL>

<P><STRONG><a name="[217]"></a>wolfSSL_CTX_set_psk_server_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[344]"></a>wolfSSL_set_psk_server_callback</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
</UL>

<P><STRONG><a name="[75f]"></a>wolfSSL_get_psk_identity_hint</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[760]"></a>wolfSSL_get_psk_identity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>wolfSSL_CTX_use_psk_identity_hint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wolfSSL_CTX_use_psk_identity_hint &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[345]"></a>wolfSSL_use_psk_identity_hint</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[346]"></a>wolfSSL_CTX_use_certificate_buffer</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[347]"></a>wolfSSL_CTX_use_PrivateKey_buffer</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[348]"></a>wolfSSL_CTX_use_certificate_chain_buffer_format</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[349]"></a>wolfSSL_CTX_use_certificate_chain_buffer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[34a]"></a>wolfSSL_use_certificate_buffer</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[34b]"></a>wolfSSL_use_PrivateKey_buffer</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[34c]"></a>wolfSSL_use_certificate_chain_buffer_format</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[34d]"></a>wolfSSL_use_certificate_chain_buffer</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[263]"></a>wolfSSL_UnloadCertsKeys</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wolfSSL_UnloadCertsKeys &rArr; FreeDer &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
</UL>

<P><STRONG><a name="[34e]"></a>wolfSSL_CTX_UnloadCAs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerUnloadCAs
</UL>

<P><STRONG><a name="[761]"></a>wolfSSL_is_init_finished</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[762]"></a>wolfSSL_get_shutdown</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>wolfSSL_session_reused</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
</UL>

<P><STRONG><a name="[1b4]"></a>wolfSSL_get_version</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
</UL>

<P><STRONG><a name="[763]"></a>wolfSSL_lib_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[764]"></a>wolfSSL_lib_version_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[765]"></a>wolfSSL_get_current_cipher_suite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>wolfSSL_get_current_cipher</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
</UL>

<P><STRONG><a name="[1b6]"></a>wolfSSL_CIPHER_get_name</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name_from_suite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name_internal
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
</UL>

<P><STRONG><a name="[766]"></a>wolfSSL_SESSION_CIPHER_get_name</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>wolfSSL_get_cipher</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_current_cipher
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CIPHER_get_name
</UL>

<P><STRONG><a name="[350]"></a>wolfSSL_get_cipher_name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_cipher_name_internal
</UL>

<P><STRONG><a name="[1b7]"></a>wolfSSL_get_curve_name</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wolfSSL_get_curve_name &rArr; wc_ecc_get_oid
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_name
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
</UL>

<P><STRONG><a name="[35c]"></a>BuildTlsHandshakeHash</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = BuildTlsHandshakeHash &rArr; wc_Sha256GetHash &rArr; wc_Sha256Final &rArr; Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256GetHash
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
</UL>

<P><STRONG><a name="[2e8]"></a>BuildTlsFinished</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = BuildTlsFinished &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsHandshakeHash
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
</UL>

<P><STRONG><a name="[31a]"></a>MakeTLSv1_2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MakeTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method_ex
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_client_method_ex
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetVersion
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_server_method_ex
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_server_method_ex
</UL>

<P><STRONG><a name="[35e]"></a>wolfSSL_DeriveTlsKeys</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeriveTlsKeys
</UL>

<P><STRONG><a name="[2a9]"></a>DeriveTlsKeys</STRONG> (Thumb, 94 bytes, Stack size 264 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = DeriveTlsKeys &rArr; _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeriveTlsKeys
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKeys
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompleteServerHello
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
</UL>

<P><STRONG><a name="[360]"></a>wolfSSL_MakeTlsMasterSecret</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeTlsMasterSecret
</UL>

<P><STRONG><a name="[2f2]"></a>MakeTlsMasterSecret</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = MakeTlsMasterSecret &rArr; DeriveTlsKeys &rArr; _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeTlsMasterSecret
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
</UL>

<P><STRONG><a name="[361]"></a>wolfSSL_make_eap_keys</STRONG> (Thumb, 106 bytes, Stack size 120 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[365]"></a>wolfSSL_GetHmacType</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[362]"></a>wolfSSL_SetTlsHmacInner</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wolfSSL_SetTlsHmacInner
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32toa
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[92]"></a>TLS_hmac</STRONG> (Thumb, 136 bytes, Stack size 328 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = TLS_hmac &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFree
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTlsHmacInner
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetHmacType
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetMacSecret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internal.o(.text)
<LI> keys.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>wolfTLSv1_2_client_method_ex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wolfTLSv1_2_client_method_ex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_2
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[32a]"></a>wolfTLSv1_2_client_method</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCA
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerLoadCABuffer
</UL>

<P><STRONG><a name="[88]"></a>wolfSSLv23_client_method_ex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wolfSSLv23_client_method_ex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_2
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_client_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>wolfSSLv23_client_method</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wolfSSLv23_client_method &rArr; wolfSSLv23_client_method_ex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_client_method_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
</UL>

<P><STRONG><a name="[8c]"></a>wolfTLSv1_2_server_method_ex</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wolfTLSv1_2_server_method_ex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_2
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_server_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text)
</UL>
<P><STRONG><a name="[367]"></a>wolfTLSv1_2_server_method</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_server_method_ex
</UL>

<P><STRONG><a name="[8d]"></a>wolfSSLv23_server_method_ex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wolfSSLv23_server_method_ex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_2
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_server_method
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>wolfSSLv23_server_method</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wolfSSLv23_server_method &rArr; wolfSSLv23_server_method_ex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_server_method_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
</UL>

<P><STRONG><a name="[368]"></a>wolfIO_Recv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wolfio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wolfIO_Recv &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmbedReceive
</UL>

<P><STRONG><a name="[90]"></a>EmbedReceive</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wolfio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EmbedReceive &rArr; wolfIO_Recv &rArr; recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfIO_Recv
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_LastError
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_dtls
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_using_nonblock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internal.o(.text)
</UL>
<P><STRONG><a name="[36c]"></a>wolfIO_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wolfio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wolfIO_Send &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmbedSend
</UL>

<P><STRONG><a name="[91]"></a>EmbedSend</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, wolfio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EmbedSend &rArr; wolfIO_Send &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfIO_Send
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_LastError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internal.o(.text)
</UL>
<P><STRONG><a name="[767]"></a>wolfSSL_SetIORecv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[768]"></a>wolfSSL_SetIOSend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[769]"></a>wolfSSL_SetIOReadCtx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[76a]"></a>wolfSSL_SetIOWriteCtx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[76b]"></a>wolfSSL_GetIOReadCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[76c]"></a>wolfSSL_GetIOWriteCtx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[76d]"></a>wolfSSL_SetIOReadFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[76e]"></a>wolfSSL_SetIOWriteFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wolfio.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>bench_ecc</STRONG> (Thumb, 764 bytes, Stack size 480 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5800 + Unknown Stack Size
<LI>Call Chain = bench_ecc &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[377]"></a>bench_eccMakeKey</STRONG> (Thumb, 168 bytes, Stack size 152 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5160 + Unknown Stack Size
<LI>Call Chain = bench_eccMakeKey &rArr; wc_ecc_make_key &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[378]"></a>bench_dh</STRONG> (Thumb, 390 bytes, Stack size 992 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4264 + Unknown Stack Size
<LI>Call Chain = bench_dh &rArr; wc_DhAgree &rArr; wc_DhAgree_Sync &rArr; wc_DhCheckPubKey &rArr; wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDhKey
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhGenerateKeyPair
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhKeyDecode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[37a]"></a>bench_rsa</STRONG> (Thumb, 808 bytes, Stack size 768 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168 + Unknown Stack Size
<LI>Call Chain = bench_rsa &rArr; wc_RsaSSL_Verify &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSetRNG
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Sign
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicEncrypt
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Verify
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecrypt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[37e]"></a>bench_hmac_sha256</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = bench_hmac_sha256 &rArr; bench_hmac &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[37f]"></a>bench_hmac_sha</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = bench_hmac_sha &rArr; bench_hmac &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[380]"></a>bench_ripemd</STRONG> (Thumb, 190 bytes, Stack size 160 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = bench_ripemd &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRipeMd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[382]"></a>bench_sha256</STRONG> (Thumb, 314 bytes, Stack size 216 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = bench_sha256 &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256_ex
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[384]"></a>bench_sha</STRONG> (Thumb, 512 bytes, Stack size 192 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = bench_sha &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFree
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha_ex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[389]"></a>bench_poly1305</STRONG> (Thumb, 222 bytes, Stack size 136 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = bench_poly1305 &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[38a]"></a>bench_chacha20_poly1305_aead</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = bench_chacha20_poly1305_aead &rArr; wc_ChaCha20Poly1305_Encrypt &rArr; calculateAuthTag &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[38c]"></a>bench_chacha</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = bench_chacha &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetIV
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[38d]"></a>bench_rabbit</STRONG> (Thumb, 92 bytes, Stack size 184 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = bench_rabbit &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitSetKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[390]"></a>bench_arc4</STRONG> (Thumb, 450 bytes, Stack size 328 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = bench_arc4 &rArr; bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4SetKey
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Process
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[391]"></a>bench_camellia</STRONG> (Thumb, 118 bytes, Stack size 352 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = bench_camellia &rArr; wc_CamelliaSetKey &rArr; camellia_setup256
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcEncrypt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[392]"></a>bench_rng</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = bench_rng &rArr; wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
</UL>

<P><STRONG><a name="[394]"></a>benchmark_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = benchmark_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfCrypt_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_test
</UL>

<P><STRONG><a name="[395]"></a>benchmark_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = benchmark_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfCrypt_Cleanup
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_test
</UL>

<P><STRONG><a name="[c]"></a>benchmark_test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5824 + Unknown Stack Size
<LI>Call Chain = benchmark_test &rArr; benchmarks_do &rArr; bench_ecc &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_free
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[76f]"></a>benchmark_configure</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, benchmark.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>wc_Arc4SetKey</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wc_Arc4SetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_test
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
</UL>

<P><STRONG><a name="[2e9]"></a>wc_Arc4Process</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wc_Arc4Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_test
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
</UL>

<P><STRONG><a name="[2ed]"></a>wc_Arc4Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, arc4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_test
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
</UL>

<P><STRONG><a name="[22a]"></a>wc_Arc4Free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arc4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_test
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCiphers
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
</UL>

<P><STRONG><a name="[397]"></a>GetLength</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameHash
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubtree
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNameConstraints
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthKeyId
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthInfo
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCrlDist
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNObjectId
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNHeader
</UL>

<P><STRONG><a name="[323]"></a>GetSequence</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetSequence &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhParamsLoad
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameHash
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC_DSA_Sig
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaPrivateKeyDecode
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaPublicKeyDecode
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubtree
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNameConstraints
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeExtKeyUsage
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthKeyId
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthInfo
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeBasicCaConstraint
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCrlDist
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhKeyDecode
</UL>

<P><STRONG><a name="[398]"></a>GetSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetSet &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[770]"></a>GetSigName</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>SetLength</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytePrecision
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerialNumber
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExplicit
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetImplicit
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSet
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOctetString
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetObjectId
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitString
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetASNIntMP
</UL>

<P><STRONG><a name="[3aa]"></a>GetMyVersion</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMyVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaPrivateKeyDecode
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
</UL>

<P><STRONG><a name="[3c5]"></a>GetShortInt</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, asn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
</UL>

<P><STRONG><a name="[3a0]"></a>GetInt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNInt
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC_DSA_Sig
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaPrivateKeyDecode
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaPublicKeyDecode
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhKeyDecode
</UL>

<P><STRONG><a name="[3a5]"></a>OidFromId</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OidFromId &rArr; wc_ecc_get_oid
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
</UL>

<P><STRONG><a name="[3a7]"></a>GetObjectId</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OidFromId
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNObjectId
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeExtKeyUsage
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthInfo
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[3a8]"></a>GetAlgoId</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNNull
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[29a]"></a>wc_RsaPrivateKeyDecode</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wc_RsaPrivateKeyDecode &rArr; GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
</UL>

<P><STRONG><a name="[3ab]"></a>ToTraditionalInline</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyVersion
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipObjectId
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditional
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetPkcs8TraditionalOffset
</UL>

<P><STRONG><a name="[311]"></a>ToTraditional</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
</UL>

<P><STRONG><a name="[3ae]"></a>wc_GetPkcs8TraditionalOffset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
</UL>

<P><STRONG><a name="[3af]"></a>SetSequence</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSequence &rArr; SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreECC_DSA_Sig
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3b0]"></a>SetOctetString</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
</UL>

<P><STRONG><a name="[3b1]"></a>SetAlgoID</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetAlgoID &rArr; OidFromId &rArr; wc_ecc_get_oid
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OidFromId
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetObjectId
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
</UL>

<P><STRONG><a name="[3b4]"></a>SetMyVersion</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3b3]"></a>wc_CreatePKCS8Key</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMyVersion
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOctetString
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetObjectId
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToPKCS8
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
</UL>

<P><STRONG><a name="[29c]"></a>wc_EccPrivateKeyDecode</STRONG> (Thumb, 332 bytes, Stack size 280 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wc_EccPrivateKeyDecode &rArr; wc_ecc_import_private_key_ex &rArr; wc_EccPublicKeyDecode &rArr; wc_ecc_import_x963_ex &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyVersion
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCurve
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[28b]"></a>wc_RsaPublicKeyDecode</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wc_RsaPublicKeyDecode &rArr; GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipObjectId
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNNull
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decode_test
</UL>

<P><STRONG><a name="[334]"></a>wc_CheckPrivateKey</STRONG> (Thumb, 282 bytes, Stack size 344 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_check_private_key
</UL>

<P><STRONG><a name="[3c1]"></a>wc_GetKeyOID</STRONG> (Thumb, 150 bytes, Stack size 200 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
</UL>

<P><STRONG><a name="[3c2]"></a>UnTraditionalEnc</STRONG> (Thumb, 534 bytes, Stack size 248 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlgo
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3c4]"></a>ToTraditionalEnc</STRONG> (Thumb, 458 bytes, Stack size 224 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditional
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShortInt
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlgoV2
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOctetString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlgo
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3c7]"></a>EncryptContent</STRONG> (Thumb, 412 bytes, Stack size 224 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlgo
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3c8]"></a>DecryptContent</STRONG> (Thumb, 434 bytes, Stack size 224 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShortInt
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlgoV2
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOctetString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlgo
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3c9]"></a>wc_RsaPublicKeyDecodeRaw</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wc_RsaPublicKeyDecodeRaw &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decode_test
</UL>

<P><STRONG><a name="[379]"></a>wc_DhKeyDecode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wc_DhKeyDecode &rArr; GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
</UL>

<P><STRONG><a name="[336]"></a>wc_DhParamsLoad</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wc_DhParamsLoad &rArr; GetASNInt &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNInt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer_wrapper
</UL>

<P><STRONG><a name="[3ca]"></a>wc_DsaPublicKeyDecode</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
</UL>

<P><STRONG><a name="[3cb]"></a>wc_DsaPrivateKeyDecode</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wc_DsaPrivateKeyDecode &rArr; GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
</UL>

<P><STRONG><a name="[3cc]"></a>wc_DsaKeyToDer</STRONG> (Thumb, 282 bytes, Stack size 104 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMyVersion
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTmpDsas
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetASNIntMP
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3ce]"></a>InitSignatureCtx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitSignatureCtx &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
</UL>

<P><STRONG><a name="[285]"></a>InitDecodedCert</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitDecodedCert &rArr; InitSignatureCtx &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSignatureCtx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_check_private_key
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerifyBuffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[231]"></a>FreeAltNames</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeAltNames &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeX509
</UL>

<P><STRONG><a name="[3cf]"></a>FreeNameSubtrees</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSigner
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
</UL>

<P><STRONG><a name="[3d0]"></a>FreeSignatureCtx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FreeSignatureCtx &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[28a]"></a>FreeDecodedCert</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FreeDecodedCert &rArr; FreeSignatureCtx &rArr; wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAltNames
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignatureCtx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeNameSubtrees
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_check_private_key
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerifyBuffer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[3d1]"></a>GetSerialNumber</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetSerialNumber &rArr; GetASNInt &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNInt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
</UL>

<P><STRONG><a name="[3d4]"></a>ExtractDate</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ExtractDate &rArr; GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
</UL>

<P><STRONG><a name="[3d6]"></a>ValidateDate</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ValidateDate &rArr; ExtractDate &rArr; GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractDate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateGreaterThan
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
</UL>

<P><STRONG><a name="[3d9]"></a>wc_GetTime</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_GetTime &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn_test
</UL>

<P><STRONG><a name="[326]"></a>DecodeToKey</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = DecodeToKey &rArr; GetName &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
</UL>

<P><STRONG><a name="[3dc]"></a>SetSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>

<P><STRONG><a name="[3dd]"></a>SetImplicit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>

<P><STRONG><a name="[3de]"></a>SetExplicit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>

<P><STRONG><a name="[295]"></a>wc_EncodeSignature</STRONG> (Thumb, 110 bytes, Stack size 136 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wc_EncodeSignature &rArr; SetAlgoID &rArr; OidFromId &rArr; wc_ecc_get_oid
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOctetString8Bit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureDerEncode
</UL>

<P><STRONG><a name="[51b]"></a>wc_GetCTC_HashOID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, asn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
</UL>

<P><STRONG><a name="[28d]"></a>wc_EccPublicKeyDecode</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wc_EccPublicKeyDecode &rArr; wc_ecc_import_x963_ex &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipObjectId
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[286]"></a>ParseCertRelative</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5744<LI>Call Chain = ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCAByName
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCA
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmNameConstraints
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_check_private_key
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerifyBuffer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
</UL>

<P><STRONG><a name="[31e]"></a>ParseCert</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5768<LI>Call Chain = ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[31f]"></a>MakeSigner</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MakeSigner &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[320]"></a>FreeSigner</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeNameSubtrees
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignerTable
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[30c]"></a>FreeSignerTable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FreeSignerTable &rArr; FreeSigner &rArr; FreeNameSubtrees &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSigner
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerUnloadCAs
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
</UL>

<P><STRONG><a name="[3ee]"></a>SetSerialNumber</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3ef]"></a>wc_EccPublicKeyToDer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
</UL>

<P><STRONG><a name="[3f1]"></a>StoreECC_DSA_Sig</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = StoreECC_DSA_Sig &rArr; SetASNIntMP &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_leading_bit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetASNIntMP
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_rs_to_sig
</UL>

<P><STRONG><a name="[3f2]"></a>DecodeECC_DSA_Sig</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DecodeECC_DSA_Sig &rArr; GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_to_rs
</UL>

<P><STRONG><a name="[3f5]"></a>wc_EccKeyToDer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3f6]"></a>wc_EccPrivateKeyToDer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3f7]"></a>wc_EccPrivateKeyToPKCS8</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3f8]"></a>GetNameHash</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>

<P><STRONG><a name="[402]"></a>wc_CamelliaSetIV</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_CamelliaSetIV
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
</UL>

<P><STRONG><a name="[2f0]"></a>wc_CamelliaSetKey</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = wc_CamelliaSetKey &rArr; camellia_setup256
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetIV
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setup256
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_setup128
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
</UL>

<P><STRONG><a name="[405]"></a>wc_CamelliaEncryptDirect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_CamelliaEncryptDirect &rArr; Camellia_EncryptBlock &rArr; camellia_encrypt256
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_EncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
</UL>

<P><STRONG><a name="[406]"></a>wc_CamelliaDecryptDirect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_CamelliaDecryptDirect &rArr; Camellia_DecryptBlock &rArr; camellia_decrypt256
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_DecryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
</UL>

<P><STRONG><a name="[2ea]"></a>wc_CamelliaCbcEncrypt</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wc_CamelliaCbcEncrypt &rArr; Camellia_EncryptBlock &rArr; camellia_encrypt256
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_EncryptBlock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
</UL>

<P><STRONG><a name="[2eb]"></a>wc_CamelliaCbcDecrypt</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wc_CamelliaCbcDecrypt &rArr; Camellia_DecryptBlock &rArr; camellia_decrypt256
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_DecryptBlock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[27b]"></a>wc_Chacha_SetIV</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, chacha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_Chacha_SetIV
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
</UL>

<P><STRONG><a name="[2ef]"></a>wc_Chacha_SetKey</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, chacha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wc_Chacha_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
</UL>

<P><STRONG><a name="[27c]"></a>wc_Chacha_Process</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, chacha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = wc_Chacha_Process &rArr; wc_Chacha_wordtobyte
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_wordtobyte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
</UL>

<P><STRONG><a name="[38b]"></a>wc_ChaCha20Poly1305_Encrypt</STRONG> (Thumb, 154 bytes, Stack size 144 bytes, chacha20_poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wc_ChaCha20Poly1305_Encrypt &rArr; calculateAuthTag &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetIV
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAuthTag
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha20_poly1305_aead
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20_poly1305_aead_test
</UL>

<P><STRONG><a name="[40c]"></a>wc_ChaCha20Poly1305_Decrypt</STRONG> (Thumb, 200 bytes, Stack size 160 bytes, chacha20_poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wc_ChaCha20Poly1305_Decrypt &rArr; calculateAuthTag &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetIV
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAuthTag
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20_poly1305_aead_test
</UL>

<P><STRONG><a name="[310]"></a>Base64_Decode</STRONG> (Thumb, 316 bytes, Stack size 60 bytes, coding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Base64_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_test
</UL>

<P><STRONG><a name="[40f]"></a>Base64_Encode</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, coding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Base64_Encode &rArr; DoBase64_Encode &rArr; CEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoBase64_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_test
</UL>

<P><STRONG><a name="[410]"></a>Base64_EncodeEsc</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, coding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Base64_EncodeEsc &rArr; DoBase64_Encode &rArr; CEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoBase64_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_test
</UL>

<P><STRONG><a name="[411]"></a>Base64_Encode_NoNl</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, coding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Base64_Encode_NoNl &rArr; DoBase64_Encode &rArr; CEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoBase64_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_test
</UL>

<P><STRONG><a name="[25d]"></a>wc_InitDhKey_ex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wc_InitDhKey_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_generate_test
</UL>

<P><STRONG><a name="[413]"></a>wc_InitDhKey</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
</UL>

<P><STRONG><a name="[259]"></a>wc_FreeDhKey</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wc_FreeDhKey &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_generate_test
</UL>

<P><STRONG><a name="[414]"></a>wc_DhCheckPubKey_ex</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136<LI>Call Chain = wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub_d
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey
</UL>

<P><STRONG><a name="[419]"></a>wc_DhCheckPubKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144<LI>Call Chain = wc_DhCheckPubKey &rArr; wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
</UL>

<P><STRONG><a name="[247]"></a>wc_DhGenerateKeyPair</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = wc_DhGenerateKeyPair &rArr; GeneratePublicDh &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrivateDh
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DhGenKeyPair
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_generate_test
</UL>

<P><STRONG><a name="[249]"></a>wc_DhAgree</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = wc_DhAgree &rArr; wc_DhAgree_Sync &rArr; wc_DhCheckPubKey &rArr; wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DhAgree
</UL>

<P><STRONG><a name="[29e]"></a>wc_DhSetKey</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wc_DhSetKey &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_generate_test
</UL>

<P><STRONG><a name="[422]"></a>wc_InitDsaKey</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wc_InitDsaKey &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDsaKey_h
</UL>

<P><STRONG><a name="[423]"></a>wc_InitDsaKey_h</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDsaKey
</UL>

<P><STRONG><a name="[424]"></a>wc_FreeDsaKey</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wc_FreeDsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
</UL>

<P><STRONG><a name="[425]"></a>wc_DsaImportParamsRaw</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>

<P><STRONG><a name="[427]"></a>wc_DsaExportParamsRaw</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, dsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[428]"></a>wc_DsaExportKeyRaw</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, dsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[429]"></a>wc_DsaSign</STRONG> (Thumb, 418 bytes, Stack size 168 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216<LI>Call Chain = wc_DsaSign &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
</UL>

<P><STRONG><a name="[42f]"></a>wc_DsaVerify</STRONG> (Thumb, 328 bytes, Stack size 136 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184<LI>Call Chain = wc_DsaVerify &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
</UL>

<P><STRONG><a name="[433]"></a>wc_ecc_get_curve_idx</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_ecc_get_curve_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_name
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_size_from_id
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
</UL>

<P><STRONG><a name="[351]"></a>wc_ecc_get_name</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wc_ecc_get_name &rArr; wc_ecc_get_curve_idx
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_curve_name
</UL>

<P><STRONG><a name="[457]"></a>wc_ecc_set_curve</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_ecc_set_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
</UL>

<P><STRONG><a name="[434]"></a>ecc_projective_dbl_point</STRONG> (Thumb, 742 bytes, Stack size 72 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
</UL>

<P><STRONG><a name="[439]"></a>ecc_projective_add_point</STRONG> (Thumb, 1106 bytes, Stack size 80 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480<LI>Call Chain = ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_digit_count
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
</UL>

<P><STRONG><a name="[43b]"></a>ecc_map</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = ecc_map &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
</UL>

<P><STRONG><a name="[43d]"></a>wc_ecc_del_point_h</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wc_ecc_del_point_h &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[43e]"></a>wc_ecc_new_point_h</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_ecc_new_point_h &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[43f]"></a>wc_ecc_mulmod_ex</STRONG> (Thumb, 864 bytes, Stack size 104 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4584<LI>Call Chain = wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_setup
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_digit_count
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_digit
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[443]"></a>wc_ecc_mulmod</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = wc_ecc_mulmod &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mulmod_test
</UL>

<P><STRONG><a name="[444]"></a>wc_ecc_new_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_ecc_new_point &rArr; wc_ecc_new_point_h &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
</UL>

<P><STRONG><a name="[445]"></a>wc_ecc_del_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wc_ecc_del_point &rArr; wc_ecc_del_point_h &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
</UL>

<P><STRONG><a name="[446]"></a>wc_ecc_copy_point</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wc_ecc_copy_point &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
</UL>

<P><STRONG><a name="[447]"></a>wc_ecc_cmp_point</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wc_ecc_cmp_point &rArr; mp_cmp &rArr; mp_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
</UL>

<P><STRONG><a name="[449]"></a>wc_ecc_is_valid_idx</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_point_der
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_ex
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_id
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_raw
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
</UL>

<P><STRONG><a name="[448]"></a>wc_ecc_get_curve_id</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_ecc_get_curve_id
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
</UL>

<P><STRONG><a name="[44a]"></a>wc_ecc_get_curve_size_from_id</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx
</UL>

<P><STRONG><a name="[44b]"></a>wc_ecc_get_curve_idx_from_name</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_id_from_name
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_size_from_name
</UL>

<P><STRONG><a name="[44d]"></a>wc_ecc_get_curve_size_from_name</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx_from_name
</UL>

<P><STRONG><a name="[44e]"></a>wc_ecc_get_curve_id_from_name</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx_from_name
</UL>

<P><STRONG><a name="[450]"></a>wc_ecc_get_curve_id_from_params</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_param
</UL>

<P><STRONG><a name="[451]"></a>wc_ecc_shared_secret_gen</STRONG> (Thumb, 88 bytes, Stack size 104 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = wc_ecc_shared_secret_gen &rArr; wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_ex
</UL>

<P><STRONG><a name="[453]"></a>wc_ecc_shared_secret_ex</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = wc_ecc_shared_secret_ex &rArr; wc_ecc_shared_secret_gen &rArr; wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_ssh_test
</UL>

<P><STRONG><a name="[241]"></a>wc_ecc_shared_secret</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = wc_ecc_shared_secret &rArr; wc_ecc_shared_secret_ex &rArr; wc_ecc_shared_secret_gen &rArr; wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_ex
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccSharedSecret
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[454]"></a>wc_ecc_point_is_at_infinity</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_ecc_point_is_at_infinity
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_digit_count
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[456]"></a>wc_ecc_make_pub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = wc_ecc_make_pub &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[244]"></a>wc_ecc_make_key_ex</STRONG> (Thumb, 230 bytes, Stack size 256 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_set_curve
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccMakeKey
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
</UL>

<P><STRONG><a name="[245]"></a>wc_ecc_make_key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5008<LI>Call Chain = wc_ecc_make_key &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccMakeKey
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[25c]"></a>wc_ecc_init_ex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_ecc_init_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
</UL>

<P><STRONG><a name="[3b9]"></a>wc_ecc_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_ecc_init &rArr; wc_ecc_init_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mulmod_test
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[771]"></a>wc_ecc_set_flags</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ecc.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>wc_ecc_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wc_ecc_free &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignatureCtx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mulmod_test
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[458]"></a>wc_ecc_sign_hash_ex</STRONG> (Thumb, 386 bytes, Stack size 224 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5232<LI>Call Chain = wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshb
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
</UL>

<P><STRONG><a name="[23d]"></a>wc_ecc_sign_hash</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5320<LI>Call Chain = wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free_rs
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_alloc_rs
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreECC_DSA_Sig
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccSign
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
</UL>

<P><STRONG><a name="[45d]"></a>wc_ecc_verify_hash_ex</STRONG> (Thumb, 662 bytes, Stack size 272 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024<LI>Call Chain = wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshb
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_setup
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
</UL>

<P><STRONG><a name="[23f]"></a>wc_ecc_verify_hash</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5112<LI>Call Chain = wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free_rs
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_alloc_rs
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC_DSA_Sig
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccVerify
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
</UL>

<P><STRONG><a name="[45e]"></a>wc_ecc_import_point_der</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wc_ecc_import_point_der &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
</UL>

<P><STRONG><a name="[45f]"></a>wc_ecc_export_point_der</STRONG> (Thumb, 198 bytes, Stack size 296 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wc_ecc_export_point_der &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
</UL>

<P><STRONG><a name="[2df]"></a>wc_ecc_export_x963</STRONG> (Thumb, 220 bytes, Stack size 304 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wc_ecc_export_x963 &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963_ex
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyToDer
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[460]"></a>wc_ecc_export_x963_ex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wc_ecc_export_x963_ex &rArr; wc_ecc_export_x963 &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[461]"></a>wc_ecc_is_point</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = wc_ecc_is_point &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[3bc]"></a>wc_ecc_check_key</STRONG> (Thumb, 284 bytes, Stack size 184 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = wc_ecc_check_key &rArr; ecc_check_privkey_gen &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_point_is_at_infinity
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
</UL>

<P><STRONG><a name="[29d]"></a>wc_ecc_import_x963_ex</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wc_ecc_import_x963_ex &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_set_curve
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
</UL>

<P><STRONG><a name="[463]"></a>wc_ecc_import_x963</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
</UL>

<P><STRONG><a name="[3ba]"></a>wc_ecc_export_private_only</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wc_ecc_export_private_only &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[465]"></a>wc_ecc_export_public_raw</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_raw
</UL>

<P><STRONG><a name="[466]"></a>wc_ecc_export_private_raw</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_raw
</UL>

<P><STRONG><a name="[3b6]"></a>wc_ecc_import_private_key_ex</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wc_ecc_import_private_key_ex &rArr; wc_EccPublicKeyDecode &rArr; wc_ecc_import_x963_ex &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_set_curve
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
</UL>

<P><STRONG><a name="[3bb]"></a>wc_ecc_import_private_key</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wc_ecc_import_private_key &rArr; wc_ecc_import_private_key_ex &rArr; wc_EccPublicKeyDecode &rArr; wc_ecc_import_x963_ex &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[467]"></a>wc_ecc_rs_to_sig</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wc_ecc_rs_to_sig &rArr; StoreECC_DSA_Sig &rArr; SetASNIntMP &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreECC_DSA_Sig
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
</UL>

<P><STRONG><a name="[468]"></a>wc_ecc_sig_to_rs</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC_DSA_Sig
</UL>

<P><STRONG><a name="[46a]"></a>wc_ecc_import_raw_ex</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wc_ecc_import_raw_ex &rArr; wc_ecc_import_raw_private &rArr; mp_read_radix &rArr; mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mulmod_test
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
</UL>

<P><STRONG><a name="[46b]"></a>wc_ecc_import_raw</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wc_ecc_import_raw &rArr; wc_ecc_import_raw_private &rArr; mp_read_radix &rArr; mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
</UL>

<P><STRONG><a name="[28e]"></a>wc_ecc_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_size
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[2e1]"></a>wc_ecc_sig_size</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wc_ecc_sig_size
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGetSize
</UL>

<P><STRONG><a name="[243]"></a>wc_ecc_get_oid</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_ecc_get_oid
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_curve_name
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccMakeKey
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToPKCS8
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OidFromId
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCurve
</UL>

<P><STRONG><a name="[2d6]"></a>wc_GetErrorString</STRONG> (Thumb, 5280 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_reason_error_string
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ErrorString
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_test
</UL>

<P><STRONG><a name="[46c]"></a>wc_ErrorString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_ErrorString &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetErrorString
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_test
</UL>

<P><STRONG><a name="[4f4]"></a>wc_HashGetOID</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureDerEncode
</UL>

<P><STRONG><a name="[2ad]"></a>wc_HashGetDigestSize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF1
</UL>

<P><STRONG><a name="[3fa]"></a>wc_Sha256Hash</STRONG> (Thumb, 46 bytes, Stack size 128 bytes, hash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wc_Sha256Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashForSignature
</UL>

<P><STRONG><a name="[353]"></a>wc_ShaHash</STRONG> (Thumb, 44 bytes, Stack size 120 bytes, hash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSession
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameHash
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthKeyId
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashForSignature
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[2ae]"></a>wc_Hash</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wc_Hash &rArr; wc_Sha256Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF1
</UL>

<P><STRONG><a name="[46e]"></a>wc_HashInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wc_HashInit &rArr; wc_InitSha256 &rArr; wc_InitSha256_ex &rArr; InitSha256 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
</UL>

<P><STRONG><a name="[46f]"></a>wc_HashUpdate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = wc_HashUpdate &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
</UL>

<P><STRONG><a name="[470]"></a>wc_HashFinal</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = wc_HashFinal &rArr; wc_Sha256Final &rArr; Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
</UL>

<P><STRONG><a name="[474]"></a>wc_HmacSizeByType</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hmac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
</UL>

<P><STRONG><a name="[471]"></a>_InitHmac</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _InitHmac &rArr; wc_InitSha256 &rArr; wc_InitSha256_ex &rArr; InitSha256 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
</UL>

<P><STRONG><a name="[356]"></a>wc_HmacSetKey</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitHmac
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
</UL>

<P><STRONG><a name="[357]"></a>wc_HmacUpdate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wc_HmacUpdate &rArr; HmacKeyInnerHash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
</UL>

<P><STRONG><a name="[358]"></a>wc_HmacFinal</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wc_HmacFinal &rArr; HmacKeyInnerHash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
</UL>

<P><STRONG><a name="[355]"></a>wc_HmacInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wc_HmacInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
</UL>

<P><STRONG><a name="[359]"></a>wc_HmacFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
</UL>

<P><STRONG><a name="[519]"></a>wolfSSL_GetHmacMaxSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hmac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
</UL>

<P><STRONG><a name="[473]"></a>wc_HKDF_Extract</STRONG> (Thumb, 100 bytes, Stack size 344 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = wc_HKDF_Extract &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSizeByType
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF
</UL>

<P><STRONG><a name="[475]"></a>wc_HKDF_Expand</STRONG> (Thumb, 182 bytes, Stack size 368 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wc_HKDF_Expand &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSizeByType
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF
</UL>

<P><STRONG><a name="[476]"></a>wc_HKDF</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = wc_HKDF &rArr; wc_HKDF_Expand &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSizeByType
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdf_test
</UL>

<P><STRONG><a name="[51f]"></a>CheckRunTimeSettings</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[477]"></a>mp_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>

<P><STRONG><a name="[3a3]"></a>mp_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDhKey
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqrmod
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_addmod
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_submod
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_to_rs
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_rs_to_sig
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_point_der
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free_rs
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_param
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaImportParamsRaw
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDsaKey
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_leading_bit
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecodeRaw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[3a1]"></a>mp_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqrmod
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_addmod
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_submod
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load_item
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecodeRaw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[412]"></a>mp_init_multi</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_rs_to_sig
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_point_der
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_param
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDsaKey
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[41e]"></a>mp_forcezero</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDsaKey
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
</UL>

<P><STRONG><a name="[459]"></a>mp_count_bits</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_is_2k
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>

<P><STRONG><a name="[39e]"></a>mp_unsigned_bin_size</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mp_unsigned_bin_size
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_to_rs
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_raw
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaExportKeyRaw
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaExportParamsRaw
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaImportParamsRaw
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrivateDh
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreECC_DSA_Sig
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetASNIntMP
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFlattenPublicKey
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaGetValue
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[47f]"></a>mp_exch</STRONG> (Thumb, 20 bytes, Stack size 20 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[478]"></a>mp_clamp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_int
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_montgomery_reduce
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_high_digs
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_sqr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshb
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub_d
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[45a]"></a>mp_rshb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mp_rshb &rArr; mp_clamp
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
</UL>

<P><STRONG><a name="[47a]"></a>mp_zero</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_int
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rand
</UL>

<P><STRONG><a name="[479]"></a>mp_rshd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_rshd &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
</UL>

<P><STRONG><a name="[47b]"></a>mp_grow</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_montgomery_reduce
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_high_digs
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_bit
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_sqr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub_d
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[416]"></a>mp_copy</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_copy_point
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
</UL>

<P><STRONG><a name="[47d]"></a>mp_mod_2d</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[47e]"></a>mp_div_2d</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshb
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_at_pos
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_leading_bit
</UL>

<P><STRONG><a name="[480]"></a>mp_init_size</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mp_init_size &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[481]"></a>mp_init_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mp_init_copy &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_leading_bit
</UL>

<P><STRONG><a name="[39d]"></a>mp_leading_bit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mp_leading_bit &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreECC_DSA_Sig
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetASNIntMP
</UL>

<P><STRONG><a name="[482]"></a>mp_to_unsigned_bin_at_pos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[39f]"></a>mp_to_unsigned_bin</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_at_pos
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_to_rs
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_raw
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaExportKeyRaw
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaExportParamsRaw
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetASNIntMP
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFlattenPublicKey
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaGetValue
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[483]"></a>mp_lshd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rand
</UL>

<P><STRONG><a name="[484]"></a>mp_mul_2d</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_int
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[3a2]"></a>mp_read_unsigned_bin</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_point_der
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_param
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecodeRaw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[485]"></a>fast_s_mp_mul_digs</STRONG> (Thumb, 240 bytes, Stack size 2104 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>

<P><STRONG><a name="[486]"></a>s_mp_mul_digs</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>

<P><STRONG><a name="[42c]"></a>mp_mul</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[487]"></a>s_mp_sqr</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = s_mp_sqr &rArr; mp_init_size &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[488]"></a>fast_s_mp_sqr</STRONG> (Thumb, 282 bytes, Stack size 2096 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = fast_s_mp_sqr &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[435]"></a>mp_sqr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = mp_sqr &rArr; fast_s_mp_sqr &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_sqr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqrmod
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
</UL>

<P><STRONG><a name="[43c]"></a>mp_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mp_set &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_int
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_point_der
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
</UL>

<P><STRONG><a name="[489]"></a>s_mp_sub</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_montgomery_reduce
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[48b]"></a>mp_cmp_mag</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_montgomery_reduce
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
</UL>

<P><STRONG><a name="[48a]"></a>s_mp_add</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = s_mp_add &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[42d]"></a>mp_add</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mp_add &rArr; s_mp_add &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_addmod
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[437]"></a>mp_sub</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mp_sub &rArr; s_mp_add &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_submod
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[3b8]"></a>mp_cmp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp &rArr; mp_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_point
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_param
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
</UL>

<P><STRONG><a name="[48c]"></a>mp_abs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_abs &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[48d]"></a>mp_div</STRONG> (Thumb, 332 bytes, Stack size 104 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[42b]"></a>mp_mod</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqrmod
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_addmod
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_submod
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_point
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
</UL>

<P><STRONG><a name="[48e]"></a>mp_reduce_2k_l</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = mp_reduce_2k_l &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[48f]"></a>mp_set_bit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_set_bit &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
</UL>

<P><STRONG><a name="[490]"></a>mp_2expt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mp_2expt &rArr; mp_set_bit &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set_bit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
</UL>

<P><STRONG><a name="[491]"></a>mp_reduce_2k_setup_l</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mp_reduce_2k_setup_l &rArr; mp_2expt &rArr; mp_set_bit &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[415]"></a>mp_cmp_d</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_cmp_d
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
</UL>

<P><STRONG><a name="[492]"></a>fast_s_mp_mul_high_digs</STRONG> (Thumb, 270 bytes, Stack size 2104 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = fast_s_mp_mul_high_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
</UL>

<P><STRONG><a name="[493]"></a>s_mp_mul_high_digs</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = s_mp_mul_high_digs &rArr; fast_s_mp_mul_high_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_high_digs
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[494]"></a>mp_reduce</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = mp_reduce &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[495]"></a>mp_reduce_setup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mp_reduce_setup &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[496]"></a>s_mp_exptmod</STRONG> (Thumb, 666 bytes, Stack size 656 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2968<LI>Call Chain = s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[42e]"></a>mp_mulmod</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = mp_mulmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[497]"></a>mp_mul_2</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_mul_2 &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
</UL>

<P><STRONG><a name="[441]"></a>mp_montgomery_calc_normalization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mp_montgomery_calc_normalization &rArr; mp_2expt &rArr; mp_set_bit &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
</UL>

<P><STRONG><a name="[498]"></a>mp_mul_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mp_mul_d &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
</UL>

<P><STRONG><a name="[499]"></a>mp_reduce_2k</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mp_reduce_2k &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[49a]"></a>mp_reduce_2k_setup</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mp_reduce_2k_setup &rArr; mp_2expt &rArr; mp_set_bit &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
</UL>

<P><STRONG><a name="[49b]"></a>mp_dr_reduce</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mp_dr_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[49e]"></a>mp_dr_setup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
</UL>

<P><STRONG><a name="[49c]"></a>fast_mp_montgomery_reduce</STRONG> (Thumb, 334 bytes, Stack size 4144 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4288<LI>Call Chain = fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[436]"></a>mp_montgomery_reduce</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_montgomery_reduce
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[440]"></a>mp_montgomery_setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
</UL>

<P><STRONG><a name="[49d]"></a>mp_exptmod_fast</STRONG> (Thumb, 738 bytes, Stack size 640 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = mp_exptmod_fast &rArr; mp_mulmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_setup
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_setup
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[49f]"></a>mp_reduce_is_2k</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_reduce_is_2k
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[4a3]"></a>mp_dr_is_modulus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_dr_is_modulus
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[4a2]"></a>mp_reduce_is_2k_l</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mp_reduce_is_2k_l
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[438]"></a>mp_div_2</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_div_2 &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_dbl_point
</UL>

<P><STRONG><a name="[4a0]"></a>mp_invmod_slow</STRONG> (Thumb, 652 bytes, Stack size 160 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mp_invmod_slow &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
</UL>

<P><STRONG><a name="[4a1]"></a>fast_mp_invmod</STRONG> (Thumb, 454 bytes, Stack size 136 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = fast_mp_invmod &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
</UL>

<P><STRONG><a name="[42a]"></a>mp_invmod</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = mp_invmod &rArr; mp_invmod_slow &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_map
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[418]"></a>mp_exptmod</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3048 + In Cycle
<LI>Call Chain = mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_is_2k_l
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_is_modulus
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_is_2k
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree_Sync
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePublicDh
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[772]"></a>mp_is_bit_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, integer.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>mp_submod</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>

<P><STRONG><a name="[4a5]"></a>mp_addmod</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>

<P><STRONG><a name="[4a6]"></a>mp_div_3</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
</UL>

<P><STRONG><a name="[4a7]"></a>mp_set_int</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
</UL>

<P><STRONG><a name="[4a8]"></a>mp_sqrmod</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>

<P><STRONG><a name="[417]"></a>mp_sub_d</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey_ex
</UL>

<P><STRONG><a name="[4a9]"></a>mp_add_d</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub_d
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub_d
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rand
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[773]"></a>mp_cnt_lsb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, integer.o(.text), UNUSED)

<P><STRONG><a name="[4ab]"></a>mp_mod_d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
</UL>

<P><STRONG><a name="[426]"></a>mp_read_radix</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mp_read_radix &rArr; mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_rs_to_sig
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_private
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_param
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load_item
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaImportParamsRaw
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[501]"></a>wolfSSL_SetLoggingCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logging.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_test
</UL>

<P><STRONG><a name="[4ff]"></a>wolfSSL_Debugging_ON</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logging.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_test
</UL>

<P><STRONG><a name="[500]"></a>wolfSSL_Debugging_OFF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, logging.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_test
</UL>

<P><STRONG><a name="[4ad]"></a>wc_InitMd2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, md2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wc_InitMd2 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md2_test
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Final
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Hash
</UL>

<P><STRONG><a name="[4ae]"></a>wc_Md2Update</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, md2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wc_Md2Update
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md2_test
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Final
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Hash
</UL>

<P><STRONG><a name="[4af]"></a>wc_Md2Final</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, md2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wc_Md2Final &rArr; wc_Md2Update
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Update
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMd2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md2_test
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Hash
</UL>

<P><STRONG><a name="[3f9]"></a>wc_Md2Hash</STRONG> (Thumb, 40 bytes, Stack size 104 bytes, md2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wc_Md2Hash &rArr; wc_Md2Final &rArr; wc_Md2Update
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Final
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Update
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMd2
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashForSignature
</UL>

<P><STRONG><a name="[4b4]"></a>wc_InitMd4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md4_test
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Final
</UL>

<P><STRONG><a name="[4b0]"></a>wc_Md4Update</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, md4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = wc_Md4Update &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md4_test
</UL>

<P><STRONG><a name="[4b3]"></a>wc_Md4Final</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, md4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = wc_Md4Final &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMd4
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md4_test
</UL>

<P><STRONG><a name="[4fc]"></a>wolfSSL_SetAllocators</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wolfSSL_SetAllocators
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcb_test
</UL>

<P><STRONG><a name="[4fb]"></a>wolfSSL_GetAllocators</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wolfSSL_GetAllocators
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcb_test
</UL>

<P><STRONG><a name="[1d7]"></a>wolfSSL_Malloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_client_method_ex
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_client_method_ex
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_check_domain_name
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_cipher_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSigner
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new_ex
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew_ex
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeysSide
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowInputBuffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHandshakeHashes
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowOutputBuffer
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfTLSv1_2_server_method_ex
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSLv23_server_method_ex
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToPKCS8
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubtree
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitProcess
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcb_test
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitAndAllocMutex
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureDerEncode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF1
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[1e0]"></a>wolfSSL_Free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_check_domain_name
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSigner
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_new_ex
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAltNames
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowInputBuffer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkInputBuffer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkOutputBuffer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeArrays
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeHashes
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeX509
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeX509Name
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCiphers
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CtxResourceFree
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowOutputBuffer
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_free
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToPKCS8
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignatureCtx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeNameSubtrees
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubtree
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeTmpDsas
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitProcess
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcb_test
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitAndAllocMutex
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureDerEncode
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF1
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaCleanup
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[47c]"></a>wolfSSL_Realloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcb_test
</UL>

<P><STRONG><a name="[277]"></a>wc_Poly1305SetKey</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_Poly1305SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8TO32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Poly1305TagOld
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAuthTag
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
</UL>

<P><STRONG><a name="[279]"></a>wc_Poly1305Final</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_block
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U32TO8
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305_MAC
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Poly1305TagOld
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAuthTag
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
</UL>

<P><STRONG><a name="[278]"></a>wc_Poly1305Update</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wc_Poly1305Update &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_block
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305_MAC
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Poly1305TagOld
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAuthTag
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
</UL>

<P><STRONG><a name="[27d]"></a>wc_Poly1305_MAC</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wc_Poly1305_MAC &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U32TO64
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
</UL>

<P><STRONG><a name="[3bf]"></a>wc_PBKDF1</STRONG> (Thumb, 134 bytes, Stack size 176 bytes, pwdbased.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wc_PBKDF1 &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf1_test
</UL>

<P><STRONG><a name="[4bc]"></a>GetDigestSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwdbased.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
</UL>

<P><STRONG><a name="[3be]"></a>wc_PBKDF2</STRONG> (Thumb, 296 bytes, Stack size 400 bytes, pwdbased.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wc_PBKDF2 &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFree
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigestSize
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_test
</UL>

<P><STRONG><a name="[4bf]"></a>GetPKCS12HashSizes</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pwdbased.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPKCS12HashSizes
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[4bd]"></a>DoPKCS12Hash</STRONG> (Thumb, 188 bytes, Stack size 136 bytes, pwdbased.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = DoPKCS12Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[4be]"></a>wc_PKCS12_PBKDF_ex</STRONG> (Thumb, 698 bytes, Stack size 1432 bytes, pwdbased.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = wc_PKCS12_PBKDF_ex &rArr; DoPKCS12Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPKCS12HashSizes
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_test
</UL>

<P><STRONG><a name="[3c0]"></a>wc_PKCS12_PBKDF</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, pwdbased.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = wc_PKCS12_PBKDF &rArr; wc_PKCS12_PBKDF_ex &rArr; DoPKCS12Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CryptKey
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_test
</UL>

<P><STRONG><a name="[774]"></a>wc_Rabbit_SetHeap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rabbit.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>wc_RabbitSetKey</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rabbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = wc_RabbitSetKey &rArr; DoKey &rArr; wc_RabbitSetIV &rArr; RABBIT_next_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rabbit_test
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rabbit
</UL>

<P><STRONG><a name="[38f]"></a>wc_RabbitProcess</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rabbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = wc_RabbitProcess &rArr; DoProcess &rArr; RABBIT_next_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcess
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rabbit_test
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rabbit
</UL>

<P><STRONG><a name="[4c8]"></a>wc_RNG_DRBG_Reseed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Reseed
</UL>

<P><STRONG><a name="[4d1]"></a>wc_GenerateSeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
</UL>

<P><STRONG><a name="[4cd]"></a>wc_RNG_HealthTest</STRONG> (Thumb, 136 bytes, Stack size 168 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Uninstantiate
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Instantiate
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Reseed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTestLocal
</UL>

<P><STRONG><a name="[253]"></a>wc_InitRng_ex</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GenerateSeed
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTestLocal
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Instantiate
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rng_test
</UL>

<P><STRONG><a name="[1d8]"></a>wc_InitRng</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = wc_InitRng &rArr; wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
</UL>

<P><STRONG><a name="[1d9]"></a>wc_RNG_GenerateBlock</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GenerateSeed
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTestLocal
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Reseed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrivateDh
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rng_test
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_digit
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateByte
</UL>

<P><STRONG><a name="[4d2]"></a>wc_RNG_GenerateByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = wc_RNG_GenerateByte &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rng_test
</UL>

<P><STRONG><a name="[1da]"></a>wc_FreeRng</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wc_FreeRng &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Uninstantiate
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rng_test
</UL>

<P><STRONG><a name="[2bd]"></a>wc_InitRipeMd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ripemd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd_test
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
</UL>

<P><STRONG><a name="[2be]"></a>wc_RipeMdUpdate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ripemd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wc_RipeMdUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd_test
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
</UL>

<P><STRONG><a name="[381]"></a>wc_RipeMdFinal</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ripemd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wc_RipeMdFinal &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRipeMd
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd_test
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
</UL>

<P><STRONG><a name="[25b]"></a>wc_InitRsaKey_ex</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_InitRsaKey_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[3b7]"></a>wc_InitRsaKey</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wc_InitRsaKey &rArr; wc_InitRsaKey_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decode_test
</UL>

<P><STRONG><a name="[257]"></a>wc_FreeRsaKey</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wc_FreeRsaKey &rArr; mp_forcezero &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CheckPrivateKey
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignatureCtx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetKeyOID
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decode_test
</UL>

<P><STRONG><a name="[28c]"></a>wc_RsaEncryptSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wc_RsaEncryptSize &rArr; mp_unsigned_bin_size
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePrivateKey
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGetSize
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFlattenPublicKey
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[4dc]"></a>wc_RsaFunction</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3248<LI>Call Chain = wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>

<P><STRONG><a name="[23b]"></a>wc_RsaPublicEncrypt</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392 + Unknown Stack Size
<LI>Call Chain = wc_RsaPublicEncrypt &rArr; RsaPublicEncryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEnc
</UL>

<P><STRONG><a name="[4e1]"></a>wc_RsaPublicEncrypt_ex</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408 + Unknown Stack Size
<LI>Call Chain = wc_RsaPublicEncrypt_ex &rArr; RsaPublicEncryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[239]"></a>wc_RsaPrivateDecryptInline</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = wc_RsaPrivateDecryptInline &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaDec
</UL>

<P><STRONG><a name="[4e2]"></a>wc_RsaPrivateDecryptInline_ex</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = wc_RsaPrivateDecryptInline_ex &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[37b]"></a>wc_RsaPrivateDecrypt</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = wc_RsaPrivateDecrypt &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
</UL>

<P><STRONG><a name="[4e3]"></a>wc_RsaPrivateDecrypt_ex</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = wc_RsaPrivateDecrypt_ex &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[235]"></a>wc_RsaSSL_VerifyInline</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392<LI>Call Chain = wc_RsaSSL_VerifyInline &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRsaSign
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaVerify
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[37c]"></a>wc_RsaSSL_Verify</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = wc_RsaSSL_Verify &rArr; RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
</UL>

<P><STRONG><a name="[233]"></a>wc_RsaSSL_Sign</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392 + Unknown Stack Size
<LI>Call Chain = wc_RsaSSL_Sign &rArr; RsaPublicEncryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSign
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
</UL>

<P><STRONG><a name="[4e4]"></a>wc_RsaFlattenPublicKey</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wc_RsaFlattenPublicKey &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_flatten_test
</UL>

<P><STRONG><a name="[4e6]"></a>wc_RsaExportKey</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaGetValue
</UL>

<P><STRONG><a name="[238]"></a>wc_RsaSetRNG</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaDec
</UL>

<P><STRONG><a name="[385]"></a>wc_InitSha_ex</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha
</UL>

<P><STRONG><a name="[386]"></a>wc_ShaUpdate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashUpdate
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF1
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
</UL>

<P><STRONG><a name="[387]"></a>wc_ShaFinal</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wc_ShaFinal &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaGetHash
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashFinal
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF1
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
</UL>

<P><STRONG><a name="[46d]"></a>wc_InitSha</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitHmac
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashInit
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF1
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
</UL>

<P><STRONG><a name="[388]"></a>wc_ShaFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
</UL>

<P><STRONG><a name="[4eb]"></a>wc_ShaCopy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_ShaCopy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaGetHash
</UL>

<P><STRONG><a name="[297]"></a>wc_ShaGetHash</STRONG> (Thumb, 38 bytes, Stack size 112 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wc_ShaGetHash &rArr; wc_ShaFinal &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCertHashes
</UL>

<P><STRONG><a name="[24f]"></a>wc_InitSha256_ex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wc_InitSha256_ex &rArr; InitSha256 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha256
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHandshakeHashes
</UL>

<P><STRONG><a name="[26c]"></a>wc_Sha256Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashInput
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutputRaw
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashUpdate
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Hash
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
</UL>

<P><STRONG><a name="[383]"></a>wc_Sha256Final</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wc_Sha256Final &rArr; Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha256
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256GetHash
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashFinal
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Hash
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
</UL>

<P><STRONG><a name="[2bc]"></a>wc_InitSha256</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wc_InitSha256 &rArr; wc_InitSha256_ex &rArr; InitSha256 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitHmac
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashInit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Hash
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPKCS12Hash
</UL>

<P><STRONG><a name="[24d]"></a>wc_Sha256Free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeHashes
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
</UL>

<P><STRONG><a name="[4f2]"></a>wc_Sha256Copy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wc_Sha256Copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256GetHash
</UL>

<P><STRONG><a name="[298]"></a>wc_Sha256GetHash</STRONG> (Thumb, 38 bytes, Stack size 120 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wc_Sha256GetHash &rArr; wc_Sha256Final &rArr; Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsHandshakeHash
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCertHashes
</UL>

<P><STRONG><a name="[4f5]"></a>wc_SignatureGetSize</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, signature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wc_SignatureGetSize &rArr; wc_ecc_sig_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_size
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sig_test
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
</UL>

<P><STRONG><a name="[4f6]"></a>wc_SignatureVerify</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, signature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5184<LI>Call Chain = wc_SignatureVerify &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Verify
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGetSize
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureDerEncode
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sig_test
</UL>

<P><STRONG><a name="[4f7]"></a>wc_SignatureGenerate</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, signature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5392 + Unknown Stack Size
<LI>Call Chain = wc_SignatureGenerate &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Sign
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGetSize
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureDerEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sig_test
</UL>

<P><STRONG><a name="[2f5]"></a>wolfCrypt_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wc_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_init
</UL>

<P><STRONG><a name="[342]"></a>wolfCrypt_Cleanup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wc_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Cleanup
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_free
</UL>

<P><STRONG><a name="[13f]"></a>wc_InitMutex</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wc_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wc_InitMutex &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew_ex
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Ctx
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitAndAllocMutex
</UL>

<P><STRONG><a name="[4f8]"></a>wc_InitAndAllocMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wc_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wc_InitAndAllocMutex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMutex
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test
</UL>

<P><STRONG><a name="[228]"></a>wc_FreeMutex</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wc_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_FreeMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Cleanup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerFree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test
</UL>

<P><STRONG><a name="[13d]"></a>wc_LockMutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wc_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_LockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_invoke
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Cleanup
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSessionClient
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCAByName
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCA
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerUnloadCAs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlreadySigner
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>

<P><STRONG><a name="[13e]"></a>wc_UnLockMutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wc_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wc_UnLockMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_invoke
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Cleanup
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSessionClient
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCAByName
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCA
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerUnloadCAs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlreadySigner
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>

<P><STRONG><a name="[3d7]"></a>gmtime</STRONG> (Thumb, 304 bytes, Stack size 20 bytes, wc_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gmtime
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
</UL>

<P><STRONG><a name="[43a]"></a>get_digit_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wolfmath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_point_is_at_infinity
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_projective_add_point
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[442]"></a>get_digit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wolfmath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
</UL>

<P><STRONG><a name="[4f9]"></a>get_rand_digit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wolfmath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = get_rand_digit &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rand
</UL>

<P><STRONG><a name="[4db]"></a>mp_rand</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wolfmath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = mp_rand &rArr; get_rand_digit &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add_d
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunctionSync
</UL>

<P><STRONG><a name="[4fa]"></a>memcb_test</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = memcb_test &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetAllocators
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetAllocators
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[4fd]"></a>mutex_test</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mutex_test &rArr; wc_InitAndAllocMutex &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeMutex
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitAndAllocMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[4fe]"></a>logging_test</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = logging_test
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Debugging_OFF
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Debugging_ON
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetLoggingCb
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[24]"></a>ecc_test</STRONG> (Thumb, 274 bytes, Stack size 112 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7256 + Unknown Stack Size
<LI>Call Chain = ecc_test &rArr; ecc_test_curve &rArr; ecc_test_curve_size &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mulmod_test
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_ssh_test
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[50c]"></a>pkcs12_test</STRONG> (Thumb, 226 bytes, Stack size 200 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = pkcs12_test &rArr; wc_PKCS12_PBKDF &rArr; wc_PKCS12_PBKDF_ex &rArr; DoPKCS12Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwdbased_test
</UL>

<P><STRONG><a name="[50d]"></a>pbkdf2_test</STRONG> (Thumb, 96 bytes, Stack size 144 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = pbkdf2_test &rArr; wc_PBKDF2 &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwdbased_test
</UL>

<P><STRONG><a name="[50e]"></a>pbkdf1_test</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pbkdf1_test &rArr; wc_PBKDF1 &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwdbased_test
</UL>

<P><STRONG><a name="[23]"></a>pwdbased_test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = pwdbased_test &rArr; pkcs12_test &rArr; wc_PKCS12_PBKDF &rArr; wc_PKCS12_PBKDF_ex &rArr; DoPKCS12Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf1_test
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_test
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_test
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>dsa_test</STRONG> (Thumb, 260 bytes, Stack size 1312 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528<LI>Call Chain = dsa_test &rArr; wc_DsaSign &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaVerify
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaSign
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDsaKey
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDsaKey
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaPrivateKeyDecode
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFree
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha_ex
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>dh_test</STRONG> (Thumb, 396 bytes, Stack size 2712 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5984<LI>Call Chain = dh_test &rArr; wc_DhAgree &rArr; wc_DhAgree_Sync &rArr; wc_DhCheckPubKey &rArr; wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDhKey
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhGenerateKeyPair
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhKeyDecode
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_generate_test
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>rsa_test</STRONG> (Thumb, 1492 bytes, Stack size 768 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6512 + Unknown Stack Size
<LI>Call Chain = rsa_test &rArr; rsa_sig_test &rArr; wc_SignatureGenerate &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSetRNG
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Sign
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicEncrypt
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecryptInline
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Verify
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecrypt
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decode_test
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sig_test
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_flatten_test
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecrypt_ex
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecryptInline_ex
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicEncrypt_ex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>random_test</STRONG> (Thumb, 314 bytes, Stack size 536 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = random_test &rArr; random_rng_test &rArr; wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rng_test
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTest
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>camellia_test</STRONG> (Thumb, 292 bytes, Stack size 712 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = camellia_test &rArr; wc_CamelliaSetKey &rArr; camellia_setup256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcEncrypt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcDecrypt
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaDecryptDirect
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaEncryptDirect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetIV
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[515]"></a>chacha20_poly1305_aead_test</STRONG> (Thumb, 1128 bytes, Stack size 1528 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = chacha20_poly1305_aead_test &rArr; wc_ChaCha20Poly1305_Decrypt &rArr; calculateAuthTag &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[516]"></a>poly1305_test</STRONG> (Thumb, 316 bytes, Stack size 240 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = poly1305_test &rArr; wc_Poly1305_MAC &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305_MAC
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[517]"></a>chacha_test</STRONG> (Thumb, 444 bytes, Stack size 576 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = chacha_test &rArr; wc_Chacha_Process &rArr; wc_Chacha_wordtobyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetIV
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[1d]"></a>rabbit_test</STRONG> (Thumb, 314 bytes, Stack size 432 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = rabbit_test &rArr; wc_RabbitProcess &rArr; DoProcess &rArr; RABBIT_next_state
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitSetKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitProcess
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>arc4_test</STRONG> (Thumb, 254 bytes, Stack size 688 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = arc4_test &rArr; wc_Arc4SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4SetKey
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Process
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[518]"></a>hkdf_test</STRONG> (Thumb, 290 bytes, Stack size 328 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = hkdf_test &rArr; wc_HKDF &rArr; wc_HKDF_Expand &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[1b]"></a>hmac_sha256_test</STRONG> (Thumb, 270 bytes, Stack size 448 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = hmac_sha256_test &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFree
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetHmacMaxSize
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSizeByType
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>hmac_sha_test</STRONG> (Thumb, 828 bytes, Stack size 408 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = hmac_sha_test &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFree
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSizeByType
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>ripemd_test</STRONG> (Thumb, 198 bytes, Stack size 240 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ripemd_test &rArr; wc_RipeMdUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRipeMd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[51a]"></a>hash_test</STRONG> (Thumb, 516 bytes, Stack size 248 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = hash_test &rArr; wc_HashUpdate &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashFinal
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashUpdate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashInit
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetOID
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetCTC_HashOID
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[18]"></a>sha256_test</STRONG> (Thumb, 712 bytes, Stack size 1304 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = sha256_test &rArr; wc_Sha256GetHash &rArr; wc_Sha256Final &rArr; Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256GetHash
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256_ex
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>sha_test</STRONG> (Thumb, 412 bytes, Stack size 1296 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = sha_test &rArr; wc_ShaGetHash &rArr; wc_ShaFinal &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaGetHash
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFree
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha_ex
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>md4_test</STRONG> (Thumb, 274 bytes, Stack size 344 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = md4_test &rArr; wc_Md4Update &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Final
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Update
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMd4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>md2_test</STRONG> (Thumb, 856 bytes, Stack size 336 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = md2_test &rArr; wc_Md2Final &rArr; wc_Md2Update
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Final
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Update
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMd2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[51c]"></a>asn_test</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = asn_test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetTime
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[51d]"></a>base64_test</STRONG> (Thumb, 464 bytes, Stack size 296 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = base64_test &rArr; Base64_Encode_NoNl &rArr; DoBase64_Encode &rArr; CEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Decode
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_NoNl
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_EncodeEsc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[51e]"></a>error_test</STRONG> (Thumb, 254 bytes, Stack size 176 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = error_test &rArr; wc_ErrorString &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetErrorString
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ErrorString
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
</UL>

<P><STRONG><a name="[d]"></a>wolfcrypt_test</STRONG> (Thumb, 1082 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7272 + Unknown Stack Size
<LI>Call Chain = wolfcrypt_test &rArr; ecc_test &rArr; ecc_test_curve &rArr; ecc_test_curve_size &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd_test
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rabbit_test
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwdbased_test
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md4_test
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md2_test
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_test
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRunTimeSettings
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_test
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_test
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn_test
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdf_test
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20_poly1305_aead_test
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_test
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcb_test
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[775]"></a>hc128_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>time</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_GetTime
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
</UL>

<P><STRONG><a name="[776]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_LastError
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[777]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[778]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[212]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_Malloc_cb
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[524]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1df]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_Free_cb
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[4b6]"></a>realloc</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, h1_realloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Realloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_Realloc_cb
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[779]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchDomainName
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchBaseName
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[4ac]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = toupper &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
</UL>

<P><STRONG><a name="[12f]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_command
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_check
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_comm
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_not_found
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_invoke
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_comm
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_command
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_comm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonBlockingSSL_Connect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDateCb
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myVerify
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerRead
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys_ex
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPeer
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_free
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha20_poly1305_aead
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn_test
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve
</UL>

<P><STRONG><a name="[221]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_print_errors_fp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>

<P><STRONG><a name="[372]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
</UL>

<P><STRONG><a name="[52a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[52b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[529]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[10d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[52d]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1bf]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[531]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[139]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_command
</UL>

<P><STRONG><a name="[534]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[77a]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[77b]"></a>_ftell$unlocked</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[136]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getc &rArr; fgetc &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_fgets
</UL>

<P><STRONG><a name="[137]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = putc &rArr; fputc &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_fgets
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[32f]"></a>rewind</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rewind.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rewind &rArr; fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
</UL>

<P><STRONG><a name="[77c]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[32e]"></a>ftell</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftell_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ftell &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
</UL>

<P><STRONG><a name="[1ff]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[32d]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind
</UL>

<P><STRONG><a name="[53d]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[197]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[53f]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1fa]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[122]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b2]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetopt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetopt
</UL>

<P><STRONG><a name="[2d9]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCipherNameInternal
</UL>

<P><STRONG><a name="[1de]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd_test
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rabbit_test
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md4_test
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md2_test
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc4_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSessionClient
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCAByName
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCA
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrnstr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlreadySigner
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompleteServerHello
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoFinished
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRsaSign
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmNameConstraints
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdf_test
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20_poly1305_aead_test
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf1_test
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_test
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_test
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[44c]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx_from_name
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[143]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha_test
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_test
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd_test
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md4_test
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md2_test
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha_test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_ciphers
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_check_domain_name
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_make_eap_keys
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_shared_ciphers
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrnstr
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAltNames
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_psk_server_cb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_psk_server_cb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx_from_name
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmNameConstraints
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_test
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf1_test
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_test
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sig_test
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[1e3]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_psk_server_cb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_psk_server_cb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_test
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rabbit_test
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_make_eap_keys
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeTlsMasterSecret
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeriveTlsKeys
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhParamsLoad
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetServerID
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_KeyPemToDer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertPemToDer
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string_n
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_shared_ciphers
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserChain
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetKey
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKeys
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdUpdate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcEncrypt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcDecrypt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompleteServerHello
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowInputBuffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShrinkInputBuffer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeArrays
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowOutputBuffer
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Final
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Update
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Final
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Update
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Expand
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetIV
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF1
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerialNumber
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSerialNumber
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubtree
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthKeyId
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurve
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitSetKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitProcess
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF1
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[541]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[77d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditional
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputData
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
</UL>

<P><STRONG><a name="[542]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[77e]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_test
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac_sha
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac_sha256
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_test
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_test
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdf_test
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_test
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20_poly1305_aead_test
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_test
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs12_test
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_sig_test
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decode_test
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sig_test
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_test
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_exp_imp_test
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Copy
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaCopy
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Reseed
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[77f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[780]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[781]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_set_cipher_list
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmarks_do
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTlsHmacInner
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Final
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen_sync
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_raw
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToPKCS8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[545]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[544]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerNew_ex
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHandshakeHashes
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitX509
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Ctx
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMd2
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HKDF_Extract
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractDate
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSignatureCtx
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_test
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha_test
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20_poly1305_aead_test
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rng_test
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha256
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Instantiate
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF_ex
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_release_socket
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[782]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[783]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1c4]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_psk_client_cb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_ciphers
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_check_domain_name
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_psk_client_cb
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_use_psk_identity_hint
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSSL_CTX
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_use_psk_identity_hint
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ErrorString
</UL>

<P><STRONG><a name="[141]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetopt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygetopt
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[784]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[785]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[786]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[523]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[787]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[788]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[789]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[522]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[549]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[111]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[54b]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[54c]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[54d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[52c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[78a]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[527]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[528]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[97]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[557]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[558]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[10f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[532]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[530]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[98]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[533]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[537]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[55b]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[53c]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[55c]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[538]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fgetc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[539]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fputc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[53a]"></a>clearerr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, clearerr_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clearerr
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind
</UL>

<P><STRONG><a name="[118]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[11a]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[78b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[78c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[560]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[543]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[78d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[553]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[556]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[559]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[55a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[54f]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[561]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[564]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[562]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[56a]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[78e]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[565]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[5f8]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[78f]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[55e]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[54a]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[126]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[11c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[526]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fd]"></a>fgets</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fgets_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fgets &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
</UL>

<P><STRONG><a name="[1fe]"></a>fputs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fputs_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
</UL>

<P><STRONG><a name="[4b5]"></a>puts</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, puts_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
</UL>

<P><STRONG><a name="[330]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsa_test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CertManagerVerify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file_wrapper
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_make_pub
</UL>

<P><STRONG><a name="[563]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[567]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[566]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[568]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[56b]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[56c]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[550]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56e]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[56d]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[56f]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[570]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[551]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[552]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[571]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[555]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[572]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[573]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[574]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[575]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[576]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[577]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[578]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[15c]"></a>__sys_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[198]"></a>__sys_ensure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sys_ensure &rArr; fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flush
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[166]"></a>__sys_flen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sys_flen &rArr; fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[15a]"></a>__sys_open</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[161]"></a>__sys_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[164]"></a>__sys_seek</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[15e]"></a>__sys_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[196]"></a>_fdelete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mapi.o(i._fdelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[6a8]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[52e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[209]"></a>accept</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, net_bsd.o(i.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accept &rArr; bsd_wait &rArr; net_sys_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sock_type
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_first
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_from
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>

<P><STRONG><a name="[203]"></a>bind</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, net_bsd.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bind &rArr; bsd_open_udp &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_valid
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_accept
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[1d1]"></a>closesocket</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, net_bsd.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = closesocket &rArr; bsd_kill_socket &rArr; net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_first
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[1c3]"></a>connect</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, net_bsd.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = connect &rArr; net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_valid
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_unspec
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
</UL>

<P><STRONG><a name="[6a7]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[6ad]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[6a5]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[579]"></a>fat_close</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[58a]"></a>fat_delete</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, fs_fat.o(i.fat_delete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[57d]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[57b]"></a>fat_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(i.fat_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_flush &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[580]"></a>fat_handle_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fat_handle_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[5eb]"></a>fat_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fat_init &rArr; fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[5ed]"></a>fat_mount</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[581]"></a>fat_open</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[584]"></a>fat_read</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[586]"></a>fat_seek</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[5df]"></a>fat_vol_chk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[588]"></a>fat_write</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[55d]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[12e]"></a>finit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finit &rArr; fat_init &rArr; fs_config &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>fmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[57f]"></a>fs_drive_id</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[5c4]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[631]"></a>fs_mc_lock_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fs_mc_lock_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[608]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[598]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[599]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[1bd]"></a>gethostbyname</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_bsd_host.o(i.gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_suspend
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>

<P><STRONG><a name="[205]"></a>getsockname</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, net_bsd.o(i.getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getsockname
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_from
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_accept
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[60e]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[611]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[614]"></a>isrSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[616]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[610]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[613]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[204]"></a>listen</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, net_bsd.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = listen &rArr; net_tcp_release_socket &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_release_socket
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[41f]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
</UL>

<P><STRONG><a name="[192]"></a>mc_mci_DevCtrl</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, fs_mc_mci.o(i.mc_mci_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mc_mci_DevCtrl &rArr; mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[193]"></a>mc_mci_DrvEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_mci_DrvEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_mci_DrvEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC0_MCI_SignalEvent
</UL>

<P><STRONG><a name="[18d]"></a>mc_mci_Init</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_mci_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_idle_clock
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_data_timeout
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_power
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_width
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed_mode
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[191]"></a>mc_mci_ReadInfo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_mc_mci.o(i.mc_mci_ReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[18f]"></a>mc_mci_ReadSector</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, fs_mc_mci.o(i.mc_mci_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mc_mci_ReadSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[18e]"></a>mc_mci_UnInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mc_mci_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc_mci_UnInit &rArr; mci_card_power &rArr; fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_power
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[190]"></a>mc_mci_WriteSector</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, fs_mc_mci.o(i.mc_mci_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mc_mci_WriteSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[eb]"></a>netCore_Thread</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, net_sys.o(i.netCore_Thread))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[5d1]"></a>netDHCP_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_dhcp_client.o(i.netDHCP_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[659]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[65c]"></a>netETH_ReceiveRaw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_ReceiveRaw))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[ec]"></a>netETH_Thread</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = netETH_Thread &rArr; eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[63f]"></a>netIP_aton</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_addr.o(i.netIP_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[130]"></a>netInitialize</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_sys.o(i.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = netInitialize &rArr; netos_thread_create &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_net_sys_c_71b12f21__sys_get_ver
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[643]"></a>netMAC_aton</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_addr.o(i.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netMAC_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[640]"></a>net_addr4_aton</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_addr.o(i.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_aton
</UL>

<P><STRONG><a name="[60d]"></a>net_addr4_is_subnet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_is_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>

<P><STRONG><a name="[5ae]"></a>net_addr_comp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_comp))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_listener
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
</UL>

<P><STRONG><a name="[5aa]"></a>net_addr_copy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_copy))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
</UL>

<P><STRONG><a name="[654]"></a>net_addr_get_lhost</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_lhost))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[644]"></a>net_addr_get_local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_addr_get_local &rArr; net_ip4_get_local &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[5c1]"></a>net_addr_is_unspec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[646]"></a>net_arp_cache_add</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[649]"></a>net_arp_cache_early</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, net_arp.o(i.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[64a]"></a>net_arp_cache_find</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_arp_cache_find &rArr; arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[64b]"></a>net_arp_enqueue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_arp.o(i.net_arp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[65b]"></a>net_arp_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_arp.o(i.net_arp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_arp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[5d2]"></a>net_arp_notify</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[64d]"></a>net_arp_probe</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_probe &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
</UL>

<P><STRONG><a name="[64e]"></a>net_arp_process</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, net_arp.o(i.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_arp_process &rArr; arp_proc_response &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_sender_valid
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[650]"></a>net_arp_run</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_arp_run &rArr; arp_probe_run &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[5b0]"></a>net_bsd_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_bsd.o(i.net_bsd_notify))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
</UL>

<P><STRONG><a name="[f6]"></a>net_bsd_socket_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_bsd.o(i.net_bsd_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_bsd_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>net_bsd_socket_run</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, net_bsd.o(i.net_bsd_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_bsd_socket_run &rArr; bsd_enable &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[651]"></a>net_crc32_buf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net_common.o(i.net_crc32_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_crc32_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[f9]"></a>net_dhcp_client_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net_dhcp_client.o(i.net_dhcp_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_dhcp_client_init &rArr; dhcp_client_start &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>net_dhcp_client_run</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, net_dhcp_client.o(i.net_dhcp_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = net_dhcp_client_run &rArr; dhcp_send_message &rArr; net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_probe
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>net_dns_client_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, net_dns_client.o(i.net_dns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_dns_client_init &rArr; net_udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[609]"></a>net_dns_client_resolve</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, net_dns_client.o(i.net_dns_client_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcrc
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strchr
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_def_localm
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_lhost
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIP_aton
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_message
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_get_server
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[fc]"></a>net_dns_client_run</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, net_dns_client.o(i.net_dns_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_dns_client_run &rArr; dns_send_message &rArr; net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_stop
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_message
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_get_server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>net_eth_iface_init</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = net_eth_iface_init &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc32_buf
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_init
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_mtu_limit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>net_eth_iface_run</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = net_eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_ReceiveRaw
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[66c]"></a>net_eth_is_my_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.net_eth_is_my_addr))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[59f]"></a>net_eth_output</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>

<P><STRONG><a name="[664]"></a>net_eth_send_frame</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast4
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[65d]"></a>net_eth_update_filter</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_update_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_eth_update_filter &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_addr
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_make_mcast4
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[661]"></a>net_icmp_process</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, net_icmp.o(i.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[669]"></a>net_icmp_send_echo</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, net_icmp.o(i.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[67b]"></a>net_ip4_checksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[65e]"></a>net_ip4_chk_frame</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_ip4_chk_frame &rArr; ip4_get_chksum &rArr; net_ip4_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_is_my_addr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[60b]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, net_ip4.o(i.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>

<P><STRONG><a name="[656]"></a>net_ip4_def_localm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_def_localm))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[645]"></a>net_ip4_get_local</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, net_ip4.o(i.net_ip4_get_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_ip4_get_local &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>

<P><STRONG><a name="[673]"></a>net_ip4_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[666]"></a>net_ip4_is_subcast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[65f]"></a>net_ip4_reass_frame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_reass_frame))
<BR><BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[668]"></a>net_ip4_send_frame</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_slip_send_frame
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ppp_send_frame
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[66a]"></a>net_ip4_tx_offload</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_tx_offload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_ip4_tx_offload &rArr; ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_route
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
</UL>

<P><STRONG><a name="[ef]"></a>net_loop_iface_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_loop.o(i.net_loop_iface_init))
<BR><BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>net_loop_iface_run</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, net_loop.o(i.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_loop_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[672]"></a>net_loop_send_frame</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net_loop.o(i.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_loop_send_frame &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[5a3]"></a>net_mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[64c]"></a>net_mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
</UL>

<P><STRONG><a name="[5a0]"></a>net_mem_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
</UL>

<P><STRONG><a name="[642]"></a>net_mem_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_mem_init &rArr; netos_mutex_create &rArr; osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[674]"></a>net_mem_shrink</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_mem_shrink
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
</UL>

<P><STRONG><a name="[f8]"></a>net_nbns_client_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_nbns_client.o(i.net_nbns_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_nbns_client_init &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>net_ping_client_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ping.o(i.net_ping_client_init))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>net_ping_client_run</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_ping.o(i.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[5cc]"></a>net_rand32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[658]"></a>net_strchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_common.o(i.net_strchr))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[5d7]"></a>net_strcmp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_common.o(i.net_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_listener
</UL>

<P><STRONG><a name="[5d5]"></a>net_strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_common.o(i.net_strcpy))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_message
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
</UL>

<P><STRONG><a name="[655]"></a>net_strcrc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_common.o(i.net_strcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strcrc
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[63c]"></a>net_strtoupper</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_common.o(i.net_strtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_strtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[58c]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_suspend
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[5af]"></a>net_sys_resume</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_sys.o(i.net_sys_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_sys_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_cbfunc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
</UL>

<P><STRONG><a name="[5b7]"></a>net_sys_suspend</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_sys.o(i.net_sys_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_sys_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_id
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
</UL>

<P><STRONG><a name="[ea]"></a>net_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[591]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_suspend
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[5dd]"></a>net_sys_wakeup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[5b2]"></a>net_tcp_abort</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[678]"></a>net_tcp_alloc_port</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, net_tcp.o(i.net_tcp_alloc_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_tcp_alloc_port
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
</UL>

<P><STRONG><a name="[6b4]"></a>net_tcp_check_send</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_check_send))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[5bc]"></a>net_tcp_close</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, net_tcp.o(i.net_tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_tcp_close &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[5c0]"></a>net_tcp_connect</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_alloc_port
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[6b6]"></a>net_tcp_ctrl_opt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_ctrl_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_ctrl_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sock_type
</UL>

<P><STRONG><a name="[679]"></a>net_tcp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_tcp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[6b5]"></a>net_tcp_get_mss</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_mss))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[619]"></a>net_tcp_get_socket</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[5bd]"></a>net_tcp_get_state</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
</UL>

<P><STRONG><a name="[5be]"></a>net_tcp_listen</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[663]"></a>net_tcp_process</STRONG> (Thumb, 1216 bytes, Stack size 48 bytes, net_tcp.o(i.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[5b3]"></a>net_tcp_release_socket</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_release_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_release_socket &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[681]"></a>net_tcp_reset_window</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_reset_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[682]"></a>net_tcp_send</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[f4]"></a>net_tcp_socket_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_tcp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>net_tcp_socket_run</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, net_tcp.o(i.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[5b4]"></a>net_udp_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_close))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_stop
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[5d4]"></a>net_udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_message
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[653]"></a>net_udp_get_socket</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
</UL>

<P><STRONG><a name="[5b6]"></a>net_udp_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, net_udp.o(i.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_nbns_client_init
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_client_start
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
</UL>

<P><STRONG><a name="[660]"></a>net_udp_process</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, net_udp.o(i.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_udp_process &rArr; net_ip4_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[5b5]"></a>net_udp_release_socket</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_release_socket))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
</UL>

<P><STRONG><a name="[5d6]"></a>net_udp_send</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, net_udp.o(i.net_udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send_message
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[f3]"></a>net_udp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = net_udp_socket_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_job_invoke
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_invoke
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>

<P><STRONG><a name="[127]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[129]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[18c]"></a>osKernelSysTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[183]"></a>osMutexCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexCreate &rArr; svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitMutex
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[189]"></a>osMutexDelete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_delete
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeMutex
</UL>

<P><STRONG><a name="[187]"></a>osMutexRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[185]"></a>osMutexWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMutexWait))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[1ab]"></a>osSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[1af]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[1ad]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[1a8]"></a>osSignalClear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalClear))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[1a6]"></a>osSignalSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[1a4]"></a>osSignalWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSignalWait))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[128]"></a>osThreadCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
</UL>

<P><STRONG><a name="[ba]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[13b]"></a>osThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_command
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_job_invoke
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_invoke
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_id
</UL>

<P><STRONG><a name="[13c]"></a>osThreadTerminate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_command
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bg_job_invoke
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_invoke
</UL>

<P><STRONG><a name="[135]"></a>osThreadYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_fgets
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[19d]"></a>osTimerCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[19f]"></a>osTimerStart</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[420]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
</UL>

<P><STRONG><a name="[1e2]"></a>recv</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, net_bsd.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = recv &rArr; recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfIO_Recv
</UL>

<P><STRONG><a name="[68b]"></a>recvfrom</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, net_bsd.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = recvfrom &rArr; net_tcp_reset_window &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_from
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_reset_window
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[7f]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[6be]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[68c]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[690]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[692]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[693]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[695]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[6bd]"></a>rt_evt_clr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_event.o(i.rt_evt_clr))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
</UL>

<P><STRONG><a name="[696]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[699]"></a>rt_evt_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[69a]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[80]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[6bf]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[68e]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[6b1]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_same_rdy_prio))
<BR><BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[6b9]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[6a9]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[69c]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[60f]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[6bb]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[69d]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[69f]"></a>rt_mut_delete</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[148]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[82]"></a>rt_mut_release</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>rt_mut_wait</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[618]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[617]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[68d]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[691]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[694]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[6a0]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[69e]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>

<P><STRONG><a name="[698]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[697]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[6a2]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[6bc]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[6a1]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[6a3]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[6a4]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[12a]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[68f]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[6a6]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[6aa]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[12c]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6ac]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[6ae]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[6b0]"></a>rt_tsk_pass</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[6b2]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[147]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[1e4]"></a>send</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, net_bsd.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfIO_Send
</UL>

<P><STRONG><a name="[6b3]"></a>sendto</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, net_bsd.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_valid
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_addr_unspec
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_wait
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_open_udp
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_transfer
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_mss
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_check_send
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[59a]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[59b]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[1c2]"></a>socket</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, net_bsd.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = socket &rArr; net_tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_soket
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[68a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a4]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[a5]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[a6]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[a7]"></a>svcKernelSysTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcKernelSysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_ovf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_val
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelSysTick)
</UL>
<P><STRONG><a name="[6ba]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[a8]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexCreate)
</UL>
<P><STRONG><a name="[a9]"></a>svcMutexDelete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexDelete &rArr; rt_mut_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[aa]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[ab]"></a>svcMutexWait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMutexWait)
</UL>
<P><STRONG><a name="[ac]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[ad]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[ae]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[af]"></a>svcSignalClear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcSignalClear
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalClear)
</UL>
<P><STRONG><a name="[b0]"></a>svcSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[b1]"></a>svcSignalWait</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[b2]"></a>svcThreadCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[b3]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[b4]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rt_cmsis.o(i.osThreadExit)
<LI> rt_cmsis.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[b5]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[b6]"></a>svcTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCreate)
</UL>
<P><STRONG><a name="[b7]"></a>svcTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcTimerStart &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[6ab]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[96]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[6c3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6c7]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[6cb]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[6c9]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[61a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[6ca]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[421]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
</UL>

<P><STRONG><a name="[6cc]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[790]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[145]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
</UL>

<P><STRONG><a name="[791]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[36f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
</UL>

<P><STRONG><a name="[6cd]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[6d0]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[6ce]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6c6]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[6c5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[371]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6cf]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[61b]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[6d1]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[6b7]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_asym_finish
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[6d3]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[6c8]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1d6]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[6d4]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10]"></a>ipaddr_comm</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ipaddr_comm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>for_command</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = for_command &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>help_comm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = help_comm &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>command_invoke</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = command_invoke &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_UnLockMutex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_LockMutex
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>bg_job_invoke</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bg_job_invoke
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>getline</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = getline &rArr; fflush &rArr; $Super$$fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_fgets
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_main
</UL>

<P><STRONG><a name="[be]"></a>GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, phy_st802rt1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>Initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, phy_st802rt1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>Uninitialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, phy_st802rt1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>PowerControl</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, phy_st802rt1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>SetInterface</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, phy_st802rt1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>SetMode</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, phy_st802rt1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>GetLinkState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phy_st802rt1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>GetLinkInfo</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, phy_st802rt1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_st802rt1.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[c6]"></a>GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>Initialize</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>Uninitialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>PowerControl</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>GetMacAddress</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>SetMacAddress</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>SetAddressFilter</STRONG> (Thumb, 346 bytes, Stack size 28 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetAddressFilter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>SendFrame</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>ReadFrame</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>GetRxFrameSize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>GetRxFrameTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>GetTxFrameTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>ControlTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>Control</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>PHY_Read</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PHY_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>PHY_Write</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, emac_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PHY_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[d7]"></a>GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mci_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mci_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>RX_DMA_Complete</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mci_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>Initialize</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>Uninitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>PowerControl</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PowerControl &rArr; HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>CardPower</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mci_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>ReadCD</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadCD
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ReadWP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mci_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>SendCommand</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>SetupTransfer</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetupTransfer &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>AbortTransfer</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AbortTransfer &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>Control</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, mci_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Control &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>GetStatus</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, mci_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mci_stm32f2xx.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[174]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[176]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[173]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f2xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e4]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mc0_Init &rArr; mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc0_UnInit &rArr; mc_mci_UnInit &rArr; mci_card_power &rArr; fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mc0_RdSect &rArr; mc_mci_ReadSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mc0_WrSect &rArr; mc_mci_WriteSector &rArr; mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mc0_DevCtrl &rArr; mc_mci_DevCtrl &rArr; mc_mci_Init &rArr; mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>MC0_MCI_SignalEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC0_MCI_SignalEvent &rArr; mc_mci_DrvEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>mygetopt</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mygetopt
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1b3]"></a>showPeer</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = showPeer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_session_reused
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_version
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_curve_name
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_current_cipher
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetDhKey_Sz
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CIPHER_get_name
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1ba]"></a>build_addr</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
</UL>

<P><STRONG><a name="[1c0]"></a>wolfssl_tcp_connect</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wolfssl_tcp_connect &rArr; build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_dtls_set_peer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
</UL>

<P><STRONG><a name="[89]"></a>my_psk_client_cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_psk_client_cb &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>myVerify</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = myVerify &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>myDateCb</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = myDateCb &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[1c6]"></a>NonBlockingSSL_Connect</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6976 + Unknown Stack Size
<LI>Call Chain = NonBlockingSSL_Connect &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_fd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1ca]"></a>ClientBenchmarkConnections</STRONG> (Thumb, 960 bytes, Stack size 72 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7088 + Unknown Stack Size
<LI>Call Chain = ClientBenchmarkConnections &rArr; wolfSSL_shutdown &rArr; wolfSSL_read &rArr; wolfSSL_read_internal &rArr; ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_session
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_session
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1d5]"></a>ClientBenchmarkThroughput</STRONG> (Thumb, 670 bytes, Stack size 104 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7144 + Unknown Stack Size
<LI>Call Chain = ClientBenchmarkThroughput &rArr; wolfSSL_write &rArr; SendData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_set_fd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_new
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_connect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1e1]"></a>StartTLS_Init</STRONG> (Thumb, 798 bytes, Stack size 280 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = StartTLS_Init &rArr; send &rArr; sendto &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1e5]"></a>SMTP_Shutdown</STRONG> (Thumb, 178 bytes, Stack size 288 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7328 + Unknown Stack Size
<LI>Call Chain = SMTP_Shutdown &rArr; wolfSSL_write &rArr; SendData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_shutdown
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1e6]"></a>ClientRead</STRONG> (Thumb, 102 bytes, Stack size 112 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7112 + Unknown Stack Size
<LI>Call Chain = ClientRead &rArr; wolfSSL_read &rArr; wolfSSL_read_internal &rArr; ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1e7]"></a>Usage</STRONG> (Thumb, 1218 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Usage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
</UL>

<P><STRONG><a name="[1bb]"></a>err_sys</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_test
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTP_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTLS_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkThroughput
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientBenchmarkConnections
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>

<P><STRONG><a name="[1f7]"></a>build_addr</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, echoclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
</UL>

<P><STRONG><a name="[1f9]"></a>my_psk_client_cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, echoclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[1f8]"></a>err_sys</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, echoclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_connect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>

<P><STRONG><a name="[1fc]"></a>wolfssl_tcp_connect</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, echoclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wolfssl_tcp_connect &rArr; build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_dtls_set_peer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoclient_test
</UL>

<P><STRONG><a name="[200]"></a>build_addr</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, echoserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[202]"></a>wolfssl_tcp_listen</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, echoserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wolfssl_tcp_listen &rArr; build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
</UL>

<P><STRONG><a name="[206]"></a>my_psk_server_cb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, echoserver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[201]"></a>err_sys</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, echoserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echoserver_test
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>

<P><STRONG><a name="[20c]"></a>mygetopt</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mygetopt
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[20d]"></a>build_addr</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_accept
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[20f]"></a>wolfssl_tcp_soket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wolfssl_tcp_soket &rArr; err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_accept
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
</UL>

<P><STRONG><a name="[210]"></a>wolfssl_tcp_listen</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wolfssl_tcp_listen &rArr; build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_soket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>

<P><STRONG><a name="[8e]"></a>my_psk_server_cb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_psk_server_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>myHsDoneCb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, server.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> server.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>Usage</STRONG> (Thumb, 1612 bytes, Stack size 8 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Usage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[20e]"></a>err_sys</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_accept
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys_ex
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_soket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
</UL>

<P><STRONG><a name="[21c]"></a>showPeer</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = showPeer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_session_reused
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_version
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_curve_name
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_current_cipher
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_GetDhKey_Sz
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CIPHER_get_name
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[21a]"></a>tcp_accept</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcp_accept &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_accept
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_listen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[213]"></a>err_sys_ex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = err_sys_ex &rArr; err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerEchoData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerWrite
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerRead
</UL>

<P><STRONG><a name="[21b]"></a>NonBlockingSSL_Accept</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6976 + Unknown Stack Size
<LI>Call Chain = NonBlockingSSL_Accept &rArr; wolfSSL_accept &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_fd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[21e]"></a>ServerRead</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7104 + Unknown Stack Size
<LI>Call Chain = ServerRead &rArr; wolfSSL_read &rArr; wolfSSL_read_internal &rArr; ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[21f]"></a>ServerWrite</STRONG> (Thumb, 82 bytes, Stack size 104 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7144 + Unknown Stack Size
<LI>Call Chain = ServerWrite &rArr; wolfSSL_write &rArr; SendData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_ERR_error_string
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test
</UL>

<P><STRONG><a name="[220]"></a>udp_accept</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = udp_accept &rArr; build_addr &rArr; gethostbyname &rArr; net_dns_client_resolve &rArr; netIP_aton &rArr; net_addr4_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_sys
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfssl_tcp_soket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_addr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>

<P><STRONG><a name="[25e]"></a>ReuseKey</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReuseKey &rArr; wc_ecc_init_ex &rArr; mp_init_multi &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[266]"></a>WriteSEQ</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteSEQ
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32toa
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
</UL>

<P><STRONG><a name="[2a3]"></a>CipherRequires</STRONG> (Thumb, 506 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyClientSuite
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyServerSuite
</UL>

<P><STRONG><a name="[276]"></a>Poly1305TagOld</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Poly1305TagOld &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
</UL>

<P><STRONG><a name="[27a]"></a>ChachaAEADEncrypt</STRONG> (Thumb, 424 bytes, Stack size 128 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ChachaAEADEncrypt &rArr; wc_Poly1305_MAC &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305_MAC
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetIV
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Poly1305TagOld
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSEQ
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
</UL>

<P><STRONG><a name="[2b5]"></a>SanityCheckMsgReceived</STRONG> (Thumb, 534 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SanityCheckMsgReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[290]"></a>DoCertificateVerify</STRONG> (Thumb, 576 bytes, Stack size 600 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5744<LI>Call Chain = DoCertificateVerify &rArr; EccVerify &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccVerify
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaVerify
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeHash
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigest
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSigAlg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[299]"></a>DoClientKeyExchange</STRONG> (Thumb, 1916 bytes, Stack size 128 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920<LI>Call Chain = DoClientKeyExchange &rArr; EccSharedSecret &rArr; wc_ecc_shared_secret &rArr; wc_ecc_shared_secret_ex &rArr; wc_ecc_shared_secret_gen &rArr; wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_size
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateKeyDecode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCertHashes
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DhAgree
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccSharedSecret
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaDec
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[2a2]"></a>VerifyServerSuite</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VerifyServerSuite
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CipherRequires
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareSuites
</UL>

<P><STRONG><a name="[2a4]"></a>CompareSuites</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CompareSuites &rArr; SetCipherSpecs &rArr; VerifyClientSuite
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherSpecs
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PickHashSigAlgo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyServerSuite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchSuite
</UL>

<P><STRONG><a name="[2ab]"></a>CheckCurveId</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
</UL>

<P><STRONG><a name="[2aa]"></a>DoServerKeyExchange</STRONG> (Thumb, 2014 bytes, Stack size 648 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5792<LI>Call Chain = DoServerKeyExchange &rArr; EccVerify &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeKeyExchange
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocKey
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccVerify
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaVerify
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeHash
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashAlgoToType
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSigAlg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCurveId
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReuseKey
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[2af]"></a>DoCertificateRequest</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoCertificateRequest &rArr; PickHashSigAlgo
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PickHashSigAlgo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTLS
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[2b4]"></a>DoHandShakeMsgType</STRONG> (Thumb, 628 bytes, Stack size 48 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6848<LI>Call Chain = DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoFinished
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashInput
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c24to32
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SanityCheckMsgReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[2b6]"></a>DoHandShakeMsg</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6896<LI>Call Chain = DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHandShakeHeader
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2b8]"></a>ChachaAEADDecrypt</STRONG> (Thumb, 444 bytes, Stack size 120 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = ChachaAEADDecrypt &rArr; SendAlert &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305_MAC
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetIV
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantCompare
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Poly1305TagOld
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSEQ
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[2ba]"></a>TimingPadVerify</STRONG> (Thumb, 306 bytes, Stack size 192 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = TimingPadVerify &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdUpdate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRipeMd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadCheck
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyMac
</UL>

<P><STRONG><a name="[2c1]"></a>GetInputData</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetInputData &rArr; GrowInputBuffer &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrowInputBuffer
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2c3]"></a>VerifyMac</STRONG> (Thumb, 248 bytes, Stack size 104 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = VerifyMac &rArr; TimingPadVerify &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadCheck
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantCompare
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2e6]"></a>SetCurveId</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
</UL>

<P><STRONG><a name="[255]"></a>ForceZero</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeHandshakeResources
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_ResourceFree
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeArrays
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
</UL>

<P><STRONG><a name="[2b9]"></a>ConstantCompare</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConstantCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyMac
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
</UL>

<P><STRONG><a name="[280]"></a>min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[2cf]"></a>c32to24</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHandShakeHeader
</UL>

<P><STRONG><a name="[29b]"></a>c16toa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecordHeader
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[267]"></a>c32toa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSEQ
</UL>

<P><STRONG><a name="[284]"></a>c24to32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPeerCerts
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHandShakeHeader
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsgType
</UL>

<P><STRONG><a name="[292]"></a>ato16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[291]"></a>DecodeSigAlg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PickHashSigAlgo
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[2ac]"></a>HashAlgoToType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
</UL>

<P><STRONG><a name="[2e3]"></a>EncodeSigAlg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
</UL>

<P><STRONG><a name="[293]"></a>SetDigest</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[294]"></a>TypeHash</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateVerify
</UL>

<P><STRONG><a name="[27f]"></a>AddRecordHeader</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddRecordHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
</UL>

<P><STRONG><a name="[2cc]"></a>AddHandShakeHeader</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHeaders
</UL>

<P><STRONG><a name="[2d1]"></a>AddHeaders</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AddHeaders &rArr; AddRecordHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHandShakeHeader
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerKeyExchange
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateVerify
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificateRequest
</UL>

<P><STRONG><a name="[272]"></a>GrowOutputBuffer</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GrowOutputBuffer &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAvailableSize
</UL>

<P><STRONG><a name="[2c5]"></a>GetRecordHeader</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetRecordHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2b7]"></a>GetHandShakeHeader</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetHandShakeHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c24to32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[2c8]"></a>BuildFinished</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = BuildFinished &rArr; BuildTlsFinished &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAtLeastTLSv1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[281]"></a>Encrypt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Encrypt &rArr; ChachaAEADEncrypt &rArr; wc_Poly1305_MAC &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcEncrypt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Process
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
</UL>

<P><STRONG><a name="[2c6]"></a>Decrypt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = Decrypt &rArr; ChachaAEADDecrypt &rArr; SendAlert &rArr; BuildMessage &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcDecrypt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Process
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChachaAEADDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2c0]"></a>CipherHasExpIV</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
</UL>

<P><STRONG><a name="[2bb]"></a>PadCheck</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PadCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyMac
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingPadVerify
</UL>

<P><STRONG><a name="[2c9]"></a>DoAlert</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DoAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[2ec]"></a>SetKeys</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = SetKeys &rArr; wc_CamelliaSetKey &rArr; camellia_setup256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_SetKey
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4SetKey
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeysSide
</UL>

<P><STRONG><a name="[305]"></a>wolfSSL_read_internal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7000 + Unknown Stack Size
<LI>Call Chain = wolfSSL_read_internal &rArr; ReceiveData &rArr; wolfSSL_negotiate &rArr; wolfSSL_connect &rArr; ProcessReply &rArr; DoHandShakeMsg &rArr; DoHandShakeMsgType &rArr; ProcessPeerCerts &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_read
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_peek
</UL>

<P><STRONG><a name="[321]"></a>ProcessUserChain</STRONG> (Thumb, 548 bytes, Stack size 1112 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356<LI>Call Chain = ProcessUserChain &rArr; PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_GetHeap
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[327]"></a>ProcessChainBuffer</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7752<LI>Call Chain = ProcessChainBuffer &rArr; ProcessBuffer &rArr; AddCA &rArr; ParseCert &rArr; ParseCertRelative &rArr; ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_load_verify_buffer
</UL>

<P><STRONG><a name="[335]"></a>wolfSSL_SetTmpDH_buffer_wrapper</STRONG> (Thumb, 214 bytes, Stack size 1088 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = wolfSSL_SetTmpDH_buffer_wrapper &rArr; PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhParamsLoad
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocDer
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH_buffer
</UL>

<P><STRONG><a name="[339]"></a>wolfSSL_SetTmpDH_file_wrapper</STRONG> (Thumb, 178 bytes, Stack size 1064 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2412<LI>Call Chain = wolfSSL_SetTmpDH_file_wrapper &rArr; wolfSSL_SetTmpDH_buffer &rArr; wolfSSL_SetTmpDH_buffer_wrapper &rArr; PemToDer &rArr; ToTraditional &rArr; ToTraditionalInline &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_buffer
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH_buffer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetTmpDH_file
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTmpDH_file
</UL>

<P><STRONG><a name="[2ff]"></a>min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetServerID
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_get_shared_ciphers
</UL>

<P><STRONG><a name="[317]"></a>SetMinVersionHelper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetMinVersion
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_CTX_SetMinVersion
</UL>

<P><STRONG><a name="[31b]"></a>HashSigner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HashSigner
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeWordFromHash
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCA
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlreadySigner
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[33b]"></a>HashSession</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HashSession &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeWordFromHash
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSessionClient
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
</UL>

<P><STRONG><a name="[352]"></a>MakeWordFromHash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSession
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashSigner
</UL>

<P><STRONG><a name="[354]"></a>p_hash</STRONG> (Thumb, 274 bytes, Stack size 400 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFree
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
</UL>

<P><STRONG><a name="[35b]"></a>PRF</STRONG> (Thumb, 102 bytes, Stack size 200 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_make_eap_keys
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeTlsMasterSecret
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeriveTlsKeys
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
</UL>

<P><STRONG><a name="[35d]"></a>_DeriveTlsKeys</STRONG> (Thumb, 80 bytes, Stack size 152 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = _DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_DeriveTlsKeys
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
</UL>

<P><STRONG><a name="[35f]"></a>_MakeTlsMasterSecret</STRONG> (Thumb, 78 bytes, Stack size 152 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = _MakeTlsMasterSecret &rArr; PRF &rArr; p_hash &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_MakeTlsMasterSecret
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
</UL>

<P><STRONG><a name="[35a]"></a>ForceZero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
</UL>

<P><STRONG><a name="[363]"></a>c32toa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_SetTlsHmacInner
</UL>

<P><STRONG><a name="[369]"></a>wolfSSL_LastError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wolfio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wolfSSL_LastError &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmbedSend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmbedReceive
</UL>

<P><STRONG><a name="[36e]"></a>bench_stats_sym_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bench_stats_sym_check &rArr; current_time &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rabbit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha20_poly1305_aead
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
</UL>

<P><STRONG><a name="[370]"></a>bench_stats_sym_finish</STRONG> (Thumb, 328 bytes, Stack size 224 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = bench_stats_sym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rabbit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha20_poly1305_aead
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
</UL>

<P><STRONG><a name="[373]"></a>bench_stats_asym_finish</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = bench_stats_asym_finish &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
</UL>

<P><STRONG><a name="[37d]"></a>bench_hmac</STRONG> (Thumb, 244 bytes, Stack size 384 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = bench_hmac &rArr; wc_HmacSetKey &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_start
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_async_handle
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_finish
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_stats_sym_check
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacSetKey
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacInit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac_sha
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac_sha256
</UL>

<P><STRONG><a name="[393]"></a>benchmarks_do</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5816 + Unknown Stack Size
<LI>Call Chain = benchmarks_do &rArr; bench_ecc &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac_sha
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac_sha256
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rabbit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha20_poly1305_aead
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;benchmark_test
</UL>

<P><STRONG><a name="[376]"></a>bench_async_handle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, benchmark.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
</UL>

<P><STRONG><a name="[375]"></a>bench_stats_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, benchmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bench_stats_start &rArr; current_time &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_sha256
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ripemd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rsa
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_dh
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_eccMakeKey
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_ecc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_hmac
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rng
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_camellia
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_arc4
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_rabbit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_chacha20_poly1305_aead
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_poly1305
</UL>

<P><STRONG><a name="[396]"></a>GetASNHeader</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSet
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOctetString
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNInt
</UL>

<P><STRONG><a name="[3e8]"></a>GetBoolean</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBoolean
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeBasicCaConstraint
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[399]"></a>GetASNInt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetASNInt &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhParamsLoad
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSerialNumber
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
</UL>

<P><STRONG><a name="[39c]"></a>SetASNIntMP</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SetASNIntMP &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_leading_bit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreECC_DSA_Sig
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
</UL>

<P><STRONG><a name="[3a4]"></a>CheckBitString</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CheckBitString &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[3a6]"></a>GetASNObjectId</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipObjectId
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[3c3]"></a>CheckAlgo</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, asn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
</UL>

<P><STRONG><a name="[3bd]"></a>CryptKey</STRONG> (Thumb, 282 bytes, Stack size 392 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4SetKey
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Arc4Process
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PKCS12_PBKDF
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF2
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_PBKDF1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnTraditionalEnc
</UL>

<P><STRONG><a name="[3d2]"></a>GetKey</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = GetKey &rArr; GetAlgoId &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCurve
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[3d3]"></a>GetName</STRONG> (Thumb, 816 bytes, Stack size 72 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GetName &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSet
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipObjectId
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNObjectId
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[3d8]"></a>DateGreaterThan</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DateGreaterThan
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
</UL>

<P><STRONG><a name="[3da]"></a>GetDate</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = GetDate &rArr; ValidateDate &rArr; ExtractDate &rArr; GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[3df]"></a>SetCurve</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetObjectId
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3e1]"></a>ConfirmSignature</STRONG> (Thumb, 446 bytes, Stack size 568 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5680<LI>Call Chain = ConfirmSignature &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_VerifyInline
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey_ex
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSignatureCtx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashForSignature
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
</UL>

<P><STRONG><a name="[3e3]"></a>MatchBaseName</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MatchBaseName &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmNameConstraints
</UL>

<P><STRONG><a name="[3e4]"></a>ConfirmNameConstraints</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ConfirmNameConstraints &rArr; MatchBaseName &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchBaseName
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
</UL>

<P><STRONG><a name="[3e5]"></a>DecodeAltNames</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DecodeAltNames &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3e6]"></a>DecodeCrlDist</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DecodeCrlDist &rArr; GetSequence &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3e7]"></a>DecodeCertExtensions</STRONG> (Thumb, 722 bytes, Stack size 96 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = DecodeCertExtensions &rArr; DecodeAuthKeyId &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNameConstraints
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeExtKeyUsage
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthKeyId
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAuthInfo
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeBasicCaConstraint
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOctetString
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCrlDist
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeAltNames
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitString
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoolean
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCertRelative
</UL>

<P><STRONG><a name="[3f3]"></a>wc_BuildEccKeyDer</STRONG> (Thumb, 436 bytes, Stack size 136 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMyVersion
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOctetString8Bit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitString
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurve
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToPKCS8
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyToDer
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccKeyToDer
</UL>

<P><STRONG><a name="[3d5]"></a>GetTime</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractDate
</UL>

<P><STRONG><a name="[3a9]"></a>GetASNNull</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetASNNull
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
</UL>

<P><STRONG><a name="[3ad]"></a>GetOctetString</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetOctetString &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[39b]"></a>BytePrecision</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, asn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>

<P><STRONG><a name="[3f4]"></a>SetBitString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEccPublicKey
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3b2]"></a>SetObjectId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetObjectId &rArr; SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CreatePKCS8Key
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurve
</UL>

<P><STRONG><a name="[3ac]"></a>SkipObjectId</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SkipObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASNObjectId
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyDecode
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalInline
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[3b5]"></a>CheckCurve</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckCurve &rArr; wc_ecc_get_oid
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_oid
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[3c6]"></a>CheckAlgoV2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptContent
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToTraditionalEnc
</UL>

<P><STRONG><a name="[3cd]"></a>FreeTmpDsas</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DsaKeyToDer
</UL>

<P><STRONG><a name="[3db]"></a>GetCertHeader</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetCertHeader &rArr; GetSerialNumber &rArr; GetASNInt &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSerialNumber
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[3e0]"></a>SetOctetString8Bit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, asn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_BuildEccKeyDer
</UL>

<P><STRONG><a name="[3e2]"></a>HashForSignature</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = HashForSignature &rArr; wc_Sha256Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Hash
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md2Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[3e9]"></a>DecodeBasicCaConstraint</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DecodeBasicCaConstraint &rArr; GetSequence &rArr; GetASNHeader &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoolean
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3ea]"></a>DecodeAuthInfo</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DecodeAuthInfo &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3eb]"></a>DecodeAuthKeyId</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DecodeAuthKeyId &rArr; wc_ShaHash &rArr; wc_ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaHash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3ec]"></a>DecodeExtKeyUsage</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DecodeExtKeyUsage &rArr; GetObjectId &rArr; GetASNObjectId &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjectId
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3ed]"></a>DecodeNameConstraints</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DecodeNameConstraints &rArr; DecodeSubtree &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubtree
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeCertExtensions
</UL>

<P><STRONG><a name="[3f0]"></a>SetEccPublicKey</STRONG> (Thumb, 146 bytes, Stack size 336 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitString
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurve
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPublicKeyToDer
</UL>

<P><STRONG><a name="[3fb]"></a>DecodeSubtree</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DecodeSubtree &rArr; wolfSSL_Malloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNameConstraints
</UL>

<P><STRONG><a name="[407]"></a>xorbuf</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xorbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcEncrypt
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcDecrypt
</UL>

<P><STRONG><a name="[403]"></a>camellia_setup128</STRONG> (Thumb, 2116 bytes, Stack size 268 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = camellia_setup128
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
</UL>

<P><STRONG><a name="[404]"></a>camellia_setup256</STRONG> (Thumb, 3060 bytes, Stack size 340 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = camellia_setup256
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaSetKey
</UL>

<P><STRONG><a name="[3fd]"></a>camellia_encrypt128</STRONG> (Thumb, 2280 bytes, Stack size 44 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = camellia_encrypt128
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_EncryptBlock
</UL>

<P><STRONG><a name="[400]"></a>camellia_decrypt128</STRONG> (Thumb, 2280 bytes, Stack size 44 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = camellia_decrypt128
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_DecryptBlock
</UL>

<P><STRONG><a name="[3fe]"></a>camellia_encrypt256</STRONG> (Thumb, 2836 bytes, Stack size 48 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = camellia_encrypt256
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_EncryptBlock
</UL>

<P><STRONG><a name="[401]"></a>camellia_decrypt256</STRONG> (Thumb, 2872 bytes, Stack size 48 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = camellia_decrypt256
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Camellia_DecryptBlock
</UL>

<P><STRONG><a name="[3fc]"></a>Camellia_EncryptBlock</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Camellia_EncryptBlock &rArr; camellia_encrypt256
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_encrypt256
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_encrypt128
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcEncrypt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaEncryptDirect
</UL>

<P><STRONG><a name="[3ff]"></a>Camellia_DecryptBlock</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Camellia_DecryptBlock &rArr; camellia_decrypt256
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_decrypt256
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camellia_decrypt128
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaCbcDecrypt
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_CamelliaDecryptDirect
</UL>

<P><STRONG><a name="[408]"></a>wc_Chacha_wordtobyte</STRONG> (Thumb, 716 bytes, Stack size 76 bytes, chacha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wc_Chacha_wordtobyte
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Chacha_Process
</UL>

<P><STRONG><a name="[409]"></a>calculateAuthTag</STRONG> (Thumb, 158 bytes, Stack size 136 bytes, chacha20_poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = calculateAuthTag &rArr; wc_Poly1305Final &rArr; poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word32ToLittle64
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
</UL>

<P><STRONG><a name="[40b]"></a>ForceZero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chacha20_poly1305.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Decrypt
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ChaCha20Poly1305_Encrypt
</UL>

<P><STRONG><a name="[40a]"></a>word32ToLittle64</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chacha20_poly1305.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateAuthTag
</UL>

<P><STRONG><a name="[40e]"></a>CEscape</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, coding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CEscape
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoBase64_Encode
</UL>

<P><STRONG><a name="[40d]"></a>DoBase64_Encode</STRONG> (Thumb, 512 bytes, Stack size 88 bytes, coding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DoBase64_Encode &rArr; CEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEscape
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode_NoNl
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_EncodeEsc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64_Encode
</UL>

<P><STRONG><a name="[41a]"></a>GeneratePrivateDh</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = GeneratePrivateDh &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscreteLogWorkFactor
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhGenerateKeyPair
</UL>

<P><STRONG><a name="[41b]"></a>GeneratePublicDh</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3120<LI>Call Chain = GeneratePublicDh &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhGenerateKeyPair
</UL>

<P><STRONG><a name="[41c]"></a>wc_DhAgree_Sync</STRONG> (Thumb, 168 bytes, Stack size 96 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240<LI>Call Chain = wc_DhAgree_Sync &rArr; wc_DhCheckPubKey &rArr; wc_DhCheckPubKey_ex &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_forcezero
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhCheckPubKey
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhAgree
</UL>

<P><STRONG><a name="[41d]"></a>DiscreteLogWorkFactor</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DiscreteLogWorkFactor &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrivateDh
</UL>

<P><STRONG><a name="[430]"></a>wc_ecc_curve_load_item</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wc_ecc_curve_load_item &rArr; mp_read_radix &rArr; mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
</UL>

<P><STRONG><a name="[431]"></a>wc_ecc_curve_load</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wc_ecc_curve_load &rArr; wc_ecc_curve_load_item &rArr; mp_read_radix &rArr; mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load_item
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[44f]"></a>wc_ecc_cmp_param</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_id_from_params
</UL>

<P><STRONG><a name="[455]"></a>wc_ecc_make_pub_ex</STRONG> (Thumb, 268 bytes, Stack size 168 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4752<LI>Call Chain = wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub
</UL>

<P><STRONG><a name="[45b]"></a>wc_ecc_alloc_rs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ecc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
</UL>

<P><STRONG><a name="[462]"></a>ecc_check_privkey_gen</STRONG> (Thumb, 238 bytes, Stack size 120 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704<LI>Call Chain = ecc_check_privkey_gen &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wc_ecc_curve_free
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[464]"></a>wc_ecc_export_raw</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_is_valid_idx
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_raw
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_public_raw
</UL>

<P><STRONG><a name="[469]"></a>wc_ecc_import_raw_private</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wc_ecc_import_raw_private &rArr; mp_read_radix &rArr; mp_add_d &rArr; mp_sub_d &rArr;  mp_add_d (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_set_curve
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_radix
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_ex
</UL>

<P><STRONG><a name="[432]"></a>_wc_ecc_curve_free</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _wc_ecc_curve_free &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash_ex
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash_ex
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_check_privkey_gen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub_ex
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_curve_load
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
</UL>

<P><STRONG><a name="[452]"></a>wc_ecc_shared_secret_gen_sync</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod_ex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_gen
</UL>

<P><STRONG><a name="[45c]"></a>wc_ecc_free_rs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wc_ecc_free_rs &rArr; mp_clear &rArr; mp_free &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
</UL>

<P><STRONG><a name="[472]"></a>HmacKeyInnerHash</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HmacKeyInnerHash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacUpdate
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HmacFinal
</UL>

<P><STRONG><a name="[4aa]"></a>mp_div_d</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_d
</UL>

<P><STRONG><a name="[4b1]"></a>Transform</STRONG> (Thumb, 1228 bytes, Stack size 132 bytes, md4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Final
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Update
</UL>

<P><STRONG><a name="[4b2]"></a>AddLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, md4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Final
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Md4Update
</UL>

<P><STRONG><a name="[4b7]"></a>poly1305_blocks</STRONG> (Thumb, 498 bytes, Stack size 168 bytes, poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U8TO32
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_block
</UL>

<P><STRONG><a name="[4b8]"></a>U8TO32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, poly1305.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305SetKey
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_blocks
</UL>

<P><STRONG><a name="[4ba]"></a>U32TO8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, poly1305.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
</UL>

<P><STRONG><a name="[4bb]"></a>U32TO64</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, poly1305.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305_MAC
</UL>

<P><STRONG><a name="[4b9]"></a>poly1305_block</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, poly1305.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = poly1305_block &rArr; poly1305_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Update
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Poly1305Final
</UL>

<P><STRONG><a name="[4c2]"></a>RABBIT_next_state</STRONG> (Thumb, 378 bytes, Stack size 92 bytes, rabbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RABBIT_next_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitSetIV
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcess
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey
</UL>

<P><STRONG><a name="[4c1]"></a>DoKey</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, rabbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DoKey &rArr; wc_RabbitSetIV &rArr; RABBIT_next_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitSetIV
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RABBIT_next_state
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitSetKey
</UL>

<P><STRONG><a name="[4c4]"></a>DoProcess</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, rabbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DoProcess &rArr; RABBIT_next_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RABBIT_next_state
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RabbitProcess
</UL>

<P><STRONG><a name="[4c3]"></a>wc_RabbitSetIV</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rabbit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = wc_RabbitSetIV &rArr; RABBIT_next_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RABBIT_next_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoKey
</UL>

<P><STRONG><a name="[4c5]"></a>Hash_df</STRONG> (Thumb, 238 bytes, Stack size 208 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Hash_df &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Instantiate
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Reseed
</UL>

<P><STRONG><a name="[4c7]"></a>Hash_DRBG_Reseed</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Hash_DRBG_Reseed &rArr; Hash_df &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTest
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_DRBG_Reseed
</UL>

<P><STRONG><a name="[4c9]"></a>Hash_gen</STRONG> (Thumb, 226 bytes, Stack size 232 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
</UL>

<P><STRONG><a name="[4cb]"></a>array_add</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = array_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
</UL>

<P><STRONG><a name="[4ca]"></a>Hash_DRBG_Generate</STRONG> (Thumb, 172 bytes, Stack size 184 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Free
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_add
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTest
</UL>

<P><STRONG><a name="[4cc]"></a>Hash_DRBG_Instantiate</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = Hash_DRBG_Instantiate &rArr; Hash_df &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTest
</UL>

<P><STRONG><a name="[4cf]"></a>wc_RNG_HealthTestLocal</STRONG> (Thumb, 90 bytes, Stack size 152 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTest
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
</UL>

<P><STRONG><a name="[4c6]"></a>ForceZero</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Uninstantiate
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Generate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_gen
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_DRBG_Reseed
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hash_df
</UL>

<P><STRONG><a name="[4d0]"></a>ConstantCompare</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConstantCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTestLocal
</UL>

<P><STRONG><a name="[4ce]"></a>Hash_DRBG_Uninstantiate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hash_DRBG_Uninstantiate
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceZero
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_HealthTest
</UL>

<P><STRONG><a name="[4d3]"></a>Transform</STRONG> (Thumb, 7580 bytes, Stack size 160 bytes, ripemd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdUpdate
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
</UL>

<P><STRONG><a name="[4d4]"></a>AddLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ripemd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdUpdate
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RipeMdFinal
</UL>

<P><STRONG><a name="[4d5]"></a>wc_RsaCleanup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wc_RsaCleanup &rArr; wolfSSL_Free &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>

<P><STRONG><a name="[4d6]"></a>RsaMGF1</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = RsaMGF1 &rArr; wc_Hash &rArr; wc_Sha256Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF
</UL>

<P><STRONG><a name="[4d7]"></a>RsaMGF</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = RsaMGF &rArr; RsaMGF1 &rArr; wc_Hash &rArr; wc_Sha256Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF1
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
</UL>

<P><STRONG><a name="[4d8]"></a>RsaPad_OAEP</STRONG> (Thumb, 342 bytes, Stack size 128 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = RsaPad_OAEP &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>

<P><STRONG><a name="[4d9]"></a>RsaUnPad_OAEP</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = RsaUnPad_OAEP &rArr; RsaMGF &rArr; RsaMGF1 &rArr; wc_Hash &rArr; wc_Sha256Hash &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetDigestSize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Hash
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaMGF
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>

<P><STRONG><a name="[4da]"></a>wc_RsaFunctionSync</STRONG> (Thumb, 622 bytes, Stack size 144 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3192<LI>Call Chain = wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_digit_count
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
</UL>

<P><STRONG><a name="[4dd]"></a>RsaPublicEncryptEx</STRONG> (Thumb, 294 bytes, Stack size 88 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336 + Unknown Stack Size
<LI>Call Chain = RsaPublicEncryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaEncryptSize
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad_OAEP
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Sign
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicEncrypt
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicEncrypt_ex
</UL>

<P><STRONG><a name="[4df]"></a>RsaPrivateDecryptEx</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336<LI>Call Chain = RsaPrivateDecryptEx &rArr; wc_RsaFunction &rArr; wc_RsaFunctionSync &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFunction
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad_OAEP
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaCleanup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_VerifyInline
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecryptInline
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaSSL_Verify
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecrypt
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecrypt_ex
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPrivateDecryptInline_ex
</UL>

<P><STRONG><a name="[4e5]"></a>RsaGetValue</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaExportKey
</UL>

<P><STRONG><a name="[4de]"></a>RsaPad</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = RsaPad &rArr; wc_RNG_GenerateBlock &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncryptEx
</UL>

<P><STRONG><a name="[4e0]"></a>RsaUnPad</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RsaUnPad
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecryptEx
</UL>

<P><STRONG><a name="[4e9]"></a>Transform</STRONG> (Thumb, 4486 bytes, Stack size 144 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
</UL>

<P><STRONG><a name="[4e8]"></a>ByteReverseWords</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteReverseWords
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
</UL>

<P><STRONG><a name="[4e7]"></a>InitSha</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha_ex
</UL>

<P><STRONG><a name="[4ea]"></a>AddLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaUpdate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ShaFinal
</UL>

<P><STRONG><a name="[4ec]"></a>InitSha256</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitSha256 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitSha256_ex
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
</UL>

<P><STRONG><a name="[4ef]"></a>Transform_Sha256</STRONG> (Thumb, 908 bytes, Stack size 320 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Transform_Sha256
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>

<P><STRONG><a name="[4ed]"></a>Sha256Update</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform_Sha256
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Update
</UL>

<P><STRONG><a name="[4ee]"></a>ByteReverseWords</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteReverseWords
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>

<P><STRONG><a name="[4f0]"></a>AddLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>

<P><STRONG><a name="[4f1]"></a>Sha256Final</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Sha256Final &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform_Sha256
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_Sha256Final
</UL>

<P><STRONG><a name="[4f3]"></a>wc_SignatureDerEncode</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, signature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wc_SignatureDerEncode &rArr; wc_EncodeSignature &rArr; SetAlgoID &rArr; OidFromId &rArr; wc_ecc_get_oid
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EncodeSignature
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_HashGetOID
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
</UL>

<P><STRONG><a name="[93]"></a>my_Realloc_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = my_Realloc_cb &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>my_Free_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_Free_cb &rArr; free &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>my_Malloc_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = my_Malloc_cb &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.text)
</UL>
<P><STRONG><a name="[502]"></a>ecc_test_make_pub</STRONG> (Thumb, 590 bytes, Stack size 272 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5592<LI>Call Chain = ecc_test_make_pub &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Malloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfSSL_Free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_EccPrivateKeyDecode
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963_ex
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_pub
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point_h
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point_h
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[503]"></a>ecc_test_vector</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432<LI>Call Chain = ecc_test_vector &rArr; ecc_test_vector_item &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector_item
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve
</UL>

<P><STRONG><a name="[505]"></a>ecc_test_curve_size</STRONG> (Thumb, 1248 bytes, Stack size 1808 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7128<LI>Call Chain = ecc_test_curve_size &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sign_hash
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_make_key_ex
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_x963_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_x963_ex
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_check_key
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve
</UL>

<P><STRONG><a name="[506]"></a>ecc_test_curve</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7144 + Unknown Stack Size
<LI>Call Chain = ecc_test_curve &rArr; ecc_test_curve_size &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_curve_size
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[507]"></a>ecc_exp_imp_test</STRONG> (Thumb, 216 bytes, Stack size 424 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ecc_exp_imp_test &rArr; wc_ecc_export_point_der &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_ex
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_id
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key_ex
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_private_key
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_private_only
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[508]"></a>ecc_point_test</STRONG> (Thumb, 634 bytes, Stack size 248 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ecc_point_test &rArr; wc_ecc_export_point_der &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_export_point_der
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_point_der
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_cmp_point
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_copy_point
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_del_point
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_new_point
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_get_curve_idx
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[50f]"></a>dh_generate_test</STRONG> (Thumb, 440 bytes, Stack size 80 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3232<LI>Call Chain = dh_generate_test &rArr; wc_DhGenerateKeyPair &rArr; GeneratePublicDh &rArr; mp_exptmod &rArr;  mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitDhKey_ex
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeDhKey
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhSetKey
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_DhGenerateKeyPair
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_test
</UL>

<P><STRONG><a name="[510]"></a>rsa_flatten_test</STRONG> (Thumb, 218 bytes, Stack size 544 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rsa_flatten_test &rArr; wc_RsaFlattenPublicKey &rArr; mp_to_unsigned_bin &rArr; mp_to_unsigned_bin_at_pos &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaFlattenPublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[511]"></a>rsa_sig_test</STRONG> (Thumb, 808 bytes, Stack size 352 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5744 + Unknown Stack Size
<LI>Call Chain = rsa_sig_test &rArr; wc_SignatureGenerate &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGetSize
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[512]"></a>rsa_decode_test</STRONG> (Thumb, 1096 bytes, Stack size 376 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rsa_decode_test &rArr; wc_RsaPublicKeyDecode &rArr; GetInt &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRsaKey
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRsaKey
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RsaPublicKeyDecodeRaw
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[513]"></a>err_sys</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = err_sys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wolfcrypt_test
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_test
</UL>

<P><STRONG><a name="[504]"></a>ecc_test_vector_item</STRONG> (Thumb, 1060 bytes, Stack size 272 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5384<LI>Call Chain = ecc_test_vector_item &rArr; wc_ecc_verify_hash &rArr; wc_ecc_verify_hash_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_verify_hash
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init_ex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_rs_to_sig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test_vector
</UL>

<P><STRONG><a name="[50b]"></a>ecc_ssh_test</STRONG> (Thumb, 126 bytes, Stack size 144 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = ecc_ssh_test &rArr; wc_ecc_shared_secret_ex &rArr; wc_ecc_shared_secret_gen &rArr; wc_ecc_shared_secret_gen_sync &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_shared_secret_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[50a]"></a>ecc_mulmod_test</STRONG> (Thumb, 108 bytes, Stack size 200 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816<LI>Call Chain = ecc_mulmod_test &rArr; wc_ecc_mulmod &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_import_raw_ex
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_mulmod
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[509]"></a>ecc_sig_test</STRONG> (Thumb, 126 bytes, Stack size 216 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5608 + Unknown Stack Size
<LI>Call Chain = ecc_sig_test &rArr; wc_SignatureGenerate &rArr; wc_ecc_sign_hash &rArr; wc_ecc_sign_hash_ex &rArr; wc_ecc_make_key_ex &rArr; wc_ecc_make_pub_ex &rArr; wc_ecc_mulmod_ex &rArr; ecc_projective_add_point &rArr; ecc_projective_dbl_point &rArr; mp_montgomery_reduce &rArr; fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; wolfSSL_Realloc &rArr; realloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_ecc_sig_size
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGenerate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureVerify
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_SignatureGetSize
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_test
</UL>

<P><STRONG><a name="[514]"></a>random_rng_test</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = random_rng_test &rArr; wc_InitRng_ex &rArr; wc_RNG_HealthTestLocal &rArr; wc_RNG_HealthTest &rArr; Hash_DRBG_Generate &rArr; Hash_gen &rArr; wc_Sha256Update &rArr; Sha256Update &rArr; Transform_Sha256
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateBlock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_FreeRng
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_InitRng_ex
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wc_RNG_GenerateByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_test
</UL>

<P><STRONG><a name="[612]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[6b8]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[615]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSignalSet
</UL>

<P><STRONG><a name="[6c1]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[6c0]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[69b]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[5f5]"></a>fs_component_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_component_init
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[625]"></a>fill_cid</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fill_cid))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[630]"></a>get_block_number</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, fs_mc_mci.o(i.get_block_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_block_number
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[61d]"></a>mc_control_lock</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, fs_mc_mci.o(i.mc_control_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[621]"></a>mc_control_sleep</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_control_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mc_control_sleep &rArr; mc_sleep_awake &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_sleep_awake
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>

<P><STRONG><a name="[623]"></a>mc_enable_acmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_enable_acmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_enable_acmd &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[62d]"></a>mc_native_init</STRONG> (Thumb, 1106 bytes, Stack size 96 bytes, fs_mc_mci.o(i.mc_native_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mc_native_init &rArr; mc_control_lock &rArr; mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_lock_unlock
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_idle_clock
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_data_timeout
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_bus_mode
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed_mode
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_speed
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch_func
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_number
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
</UL>

<P><STRONG><a name="[620]"></a>mc_read_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_read_status &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[634]"></a>mc_select_bus_width</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fs_mc_mci.o(i.mc_select_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mc_select_bus_width &rArr; mc_switch &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_bus_width
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[624]"></a>mc_select_deselect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_select_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_select_deselect &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[626]"></a>mc_select_tran_state</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, fs_mc_mci.o(i.mc_select_tran_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mc_select_tran_state &rArr; mc_stop_transmission &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
</UL>

<P><STRONG><a name="[61e]"></a>mc_set_block_len</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_set_block_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_set_block_len &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[622]"></a>mc_sleep_awake</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_sleep_awake))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_sleep_awake &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_sleep
</UL>

<P><STRONG><a name="[62e]"></a>mc_stop_transmission</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_stop_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_stop_transmission &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_tran_state
</UL>

<P><STRONG><a name="[632]"></a>mc_switch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_mc_mci.o(i.mc_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_switch &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[635]"></a>mc_switch_func</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_switch_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_switch_func &rArr; mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wfe
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[61f]"></a>mc_wfe</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fs_mc_mci.o(i.mc_wfe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc_wfe
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_WriteSector
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_ReadSector
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_DevCtrl
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch_func
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_switch
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_stop_transmission
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_sleep_awake
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_deselect
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_enable_acmd
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[62a]"></a>mci_bus_speed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_mc_mci.o(i.mci_bus_speed))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[628]"></a>mci_bus_speed_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_bus_speed_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_bus_speed_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[627]"></a>mci_bus_width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_select_bus_width
</UL>

<P><STRONG><a name="[62b]"></a>mci_card_power</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_card_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mci_card_power &rArr; fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_UnInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
</UL>

<P><STRONG><a name="[62f]"></a>mci_cmd_bus_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_cmd_bus_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_cmd_bus_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[629]"></a>mci_data_timeout</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[62c]"></a>mci_idle_clock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_mc_mci.o(i.mci_idle_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_idle_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_mci_Init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_native_init
</UL>

<P><STRONG><a name="[63e]"></a>eth_check_link</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[5db]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[665]"></a>eth_make_mcast4</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_eth.o(i.eth_make_mcast4))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[65a]"></a>eth_mtu_limit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, net_eth.o(i.eth_mtu_limit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[a2]"></a>eth_notify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_eth.o(i.eth_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_notify &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_eth.o(i.net_eth_iface_init)
</UL>
<P><STRONG><a name="[5dc]"></a>eth_receive</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_eth.o(i.eth_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[5de]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_update_filter
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>

<P><STRONG><a name="[687]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[67a]"></a>tcp_map_socket</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[67e]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[67d]"></a>tcp_proc_acknr</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_proc_acknr &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[67c]"></a>tcp_proc_dupack</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[686]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[685]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[684]"></a>tcp_que_resend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[677]"></a>tcp_send_ctrl</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_reset_window
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[683]"></a>tcp_send_data</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[67f]"></a>tcp_send_reset</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[680]"></a>tcp_set_cwnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[676]"></a>tcp_transit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[6c2]"></a>tcp_write</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[590]"></a>addr_from</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_bsd.o(i.addr_from))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[5a5]"></a>addr_transfer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_bsd.o(i.addr_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[9f]"></a>bsd_cb_tcp</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, net_bsd.o(i.bsd_cb_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsd_cb_tcp &rArr; bsd_enable &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_add_buf
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_map_socket
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> net_bsd.o(i.listen)
<LI> net_bsd.o(i.socket)
</UL>
<P><STRONG><a name="[b9]"></a>bsd_cb_udp</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, net_bsd.o(i.bsd_cb_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsd_cb_udp &rArr; bsd_enable &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_comp
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_add_buf
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_map_socket
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_copy
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_bsd.o(i.socket)
</UL>
<P><STRONG><a name="[5ac]"></a>bsd_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, net_bsd.o(i.bsd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsd_enable &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_notify
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_bsd_socket_run
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[5b1]"></a>bsd_kill_socket</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, net_bsd.o(i.bsd_kill_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bsd_kill_socket &rArr; net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_enable
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_release_socket
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_release_socket
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[5a9]"></a>bsd_map_socket</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, net_bsd.o(i.bsd_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsd_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[5a6]"></a>bsd_open_udp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_bsd.o(i.bsd_open_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsd_open_udp &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[58e]"></a>bsd_wait</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_bsd.o(i.bsd_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsd_wait &rArr; net_sys_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[5bf]"></a>is_addr_unspec</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_bsd.o(i.is_addr_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[5a4]"></a>is_addr_valid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_bsd.o(i.is_addr_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[58d]"></a>list_get_first</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_bsd.o(i.list_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[5ad]"></a>que_add_buf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_bsd.o(i.que_add_buf))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[5ab]"></a>que_free_list</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_bsd.o(i.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = que_free_list &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_kill_socket
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsd_cb_tcp
</UL>

<P><STRONG><a name="[58f]"></a>set_sock_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_bsd.o(i.set_sock_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_sock_type &rArr; net_tcp_ctrl_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_ctrl_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[5cb]"></a>dhcp_client_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, net_dhcp_client.o(i.dhcp_client_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_client_start &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_init
</UL>

<P><STRONG><a name="[a0]"></a>dhcp_listener</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, net_dhcp_client.o(i.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_selected
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp_client.o(i.net_dhcp_client_init)
</UL>
<P><STRONG><a name="[5ce]"></a>dhcp_send_message</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, net_dhcp_client.o(i.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dhcp_send_message &rArr; net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_client_run
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[5cf]"></a>is_selected</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_dhcp_client.o(i.is_selected))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[5d3]"></a>proc_opt_renew</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, net_dhcp_client.o(i.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = proc_opt_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[5d0]"></a>proc_opt_req</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, net_dhcp_client.o(i.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_opt_req
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDHCP_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[5cd]"></a>proc_opt_sel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_dhcp_client.o(i.proc_opt_sel))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[a3]"></a>nbns_listener</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, net_nbns_client.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nbns_listener &rArr; net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strtoupper
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_nbns_client.o(i.net_nbns_client_init)
</UL>
<P><STRONG><a name="[657]"></a>dns_get_server</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, net_dns_client.o(i.dns_get_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dns_get_server
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_run
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[a1]"></a>dns_listener</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, net_dns_client.o(i.dns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dns_listener &rArr; dns_stop &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcmp
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_stop
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_comp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dns_client.o(i.net_dns_client_init)
</UL>
<P><STRONG><a name="[5d9]"></a>dns_send_message</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, net_dns_client.o(i.dns_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dns_send_message &rArr; net_udp_send &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcpy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_run
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_resolve
</UL>

<P><STRONG><a name="[5d8]"></a>dns_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_dns_client.o(i.dns_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dns_stop &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_close
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dns_client_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_listener
</UL>

<P><STRONG><a name="[9e]"></a>dns_cbfunc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_bsd_host.o(i.dns_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dns_cbfunc &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osSignalSet &rArr; isrSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_bsd_host.o(i.gethostbyname)
</UL>
<P><STRONG><a name="[675]"></a>ping_send_req</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ping.o(i.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_eth_send_frame &rArr; net_arp_enqueue &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[63d]"></a>sys_proc_tick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_sys.o(i.sys_proc_tick))
<BR><BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[592]"></a>alloc_clus</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[593]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[595]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[5a7]"></a>bs_read</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bs_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[597]"></a>cache_fat</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[639]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[5b9]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[5ba]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[5c2]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_dot_entries &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[5c8]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_lfn_entry &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[5ca]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_sfn_entry &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[5c7]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_flush &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[5fa]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[5c9]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5c3]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[5fb]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[61c]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
</UL>

<P><STRONG><a name="[5e7]"></a>file_locked</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5e2]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5c6]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[5c5]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[5f9]"></a>frec_allocate</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[5ea]"></a>frec_delete</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fs_fat.o(i.frec_delete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5e9]"></a>frec_delete_elink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(i.frec_delete_elink), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5fd]"></a>frec_find</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[603]"></a>frec_find_elink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[5e6]"></a>frec_next</STRONG> (Thumb, 424 bytes, Stack size 128 bytes, fs_fat.o(i.frec_next), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5ef]"></a>fsinfo_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsinfo_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[5e0]"></a>fsinfo_write</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[594]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[596]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[5f1]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[606]"></a>lfn_char_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_char_cnt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
</UL>

<P><STRONG><a name="[5f4]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[5fe]"></a>long_ent_hash</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_fat.o(i.long_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[638]"></a>name_analyse</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[63a]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[604]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[689]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[688]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[63b]"></a>name_validate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
</UL>

<P><STRONG><a name="[5f3]"></a>path_create</STRONG> (Thumb, 558 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[5e3]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5e4]"></a>path_open</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5e1]"></a>path_validate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = path_validate &rArr; name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5f0]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_cache &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[5a8]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[600]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[601]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[5ff]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[5e8]"></a>unlink_clus</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5bb]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flush
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[5da]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>

<P><STRONG><a name="[648]"></a>arp_cache_alloc</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[647]"></a>arp_is_cacheable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[59c]"></a>arp_probe_run</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_arp.o(i.arp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_probe_run &rArr; arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
</UL>

<P><STRONG><a name="[59e]"></a>arp_proc_response</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_proc_response &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[5a1]"></a>arp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_arp.o(i.arp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arp_que_free &rArr; net_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[5a2]"></a>arp_send_reply</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_send_reply &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[59d]"></a>arp_send_request</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_send_request &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_probe
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_run
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>

<P><STRONG><a name="[64f]"></a>arp_sender_valid</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, net_arp.o(i.arp_sender_valid))
<BR><BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[60a]"></a>ip4_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_get_chksum &rArr; net_ip4_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[66d]"></a>ip4_get_mtu</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[60c]"></a>ip4_get_route</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_ip4.o(i.ip4_get_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_get_route
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offload
</UL>

<P><STRONG><a name="[636]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[637]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[652]"></a>crc32_8bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_common.o(i.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_strcrc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc32_buf
</UL>

<P><STRONG><a name="[521]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[525]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_realloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[53e]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[6d2]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[6c4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[54e]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[9a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
